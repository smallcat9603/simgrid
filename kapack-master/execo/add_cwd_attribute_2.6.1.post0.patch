From 406f4fa06a650bd5265e21cf910f6c384b9a6bf4 Mon Sep 17 00:00:00 2001
From: Millian Poquet <millian.poquet@inria.fr>
Date: Fri, 9 Dec 2016 19:00:03 +0100
Subject: [PATCH 1/3] execo process: subprocess.Popen cwd wrapping

---
 src/execo/process.py | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/src/execo/process.py b/src/execo/process.py
index 872531d..d00dc3f 100644
--- a/src/execo/process.py
+++ b/src/execo/process.py
@@ -942,7 +942,7 @@ class Process(ProcessBase):
     True
     """
 
-    def __init__(self, cmd, shell = False,
+    def __init__(self, cmd, shell = False, cwd = None,
                  pty = False, kill_subprocesses = None,
                  **kwargs):
         """:param cmd: string or tuple containing the command and args to run.
@@ -950,6 +950,8 @@ class Process(ProcessBase):
         :param shell: Whether or not to use a shell to run the
           cmd. See ``subprocess.Popen``.
 
+        :param cwd: The process working directory. See ``subprocess.Popen``.
+
         :param pty: If True, open a pseudo tty and connect process's
           stdin and stdout to it (stderr is still connected as a
           pipe). Make process a session leader. If lacking permissions
@@ -963,6 +965,8 @@ class Process(ProcessBase):
         super(Process, self).__init__(cmd, **kwargs)
         self.shell = shell
         """Whether or not to use a shell to run the cmd. See ``subprocess.Popen``"""
+        self.cwd = cwd
+        """cwd: The process working directory. See ``subprocess.Popen``."""
         self.pty = pty
         """If True, open a pseudo tty and connect process's stdin and stdout to it
         (stderr is still connected as a pipe). Make process a session
@@ -1024,6 +1028,7 @@ class Process(ProcessBase):
     def _kwargs(self):
         kwargs = []
         if self.shell != False: kwargs.append("shell=%r" % (self.shell,))
+        if self.cwd != None: kwargs.append("cwd=%r" % (self.cwd,))
         if self.pty != False: kwargs.append("pty=%r" % (self.pty,))
         if self.kill_subprocesses != None: kwargs.append("kill_subprocesses=%r" % (self.kill_subprocesses,))
         return kwargs
@@ -1031,6 +1036,7 @@ class Process(ProcessBase):
     def _infos(self):
         infos = []
         if self.shell != False: infos.append("shell=%r" % (self.shell,))
+        if self.cwd != None: infos.append("cwd=%r" % (self.cwd,))
         if self.pty != False: infos.append("pty=%r" % (self.pty,))
         if self.kill_subprocesses != None: infos.append("kill_subprocesses=%r" % (self.kill_subprocesses,))
         infos.append("pid=%s" % (self.pid,))
@@ -1066,6 +1072,7 @@ class Process(ProcessBase):
                                                 stderr = subprocess.PIPE,
                                                 close_fds = True,
                                                 shell = self.shell,
+                                                cwd = self.cwd,
                                                 preexec_fn = lambda: os.setpgid(0, the_conductor.pgrp))
                 self.stdout_fd = self._ptymaster
                 self.stderr_fd = self.process.stderr.fileno()
@@ -1077,6 +1084,7 @@ class Process(ProcessBase):
                                                 stderr = subprocess.PIPE,
                                                 close_fds = True,
                                                 shell = self.shell,
+                                                cwd = self.cwd,
                                                 preexec_fn = lambda: os.setpgid(0, the_conductor.pgrp))
                 self.stdout_fd = self.process.stdout.fileno()
                 self.stderr_fd = self.process.stderr.fileno()
-- 
2.12.0
