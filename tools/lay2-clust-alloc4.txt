#	
#	Ikki's Topology & Layout Toolkit
#	2014/05/03
#	Ikki Fujiwara <ikki@nii.ac.jp>
#	

======================================================================
1. Getting Started
======================================================================

Ikki's tool consists of 3 steps like "Layout -> Clustering -> Allocation" performed in this order (though Clustering can be skipped).
Each step is implemented in a separate program.

	gate:/home/ikki/work/lay2.rb
	gate:/home/ikki/work/clust.R
	gate:/home/ikki/work/alloc4.rb
	gate:/home/ikki/work/tabou_qap

Copy these 4 files from my working directory on the "gate" machine and put them all in a same directory of yours.
Hereafter I suppose to put them in "~/work" and to work in "calc0:~/work/0503_fabien".

Note:
- The Ruby scripts ("*.rb") require Ruby 1.9.x.
- The R script ("*.R") requires R 3.0.x and igraph0 0.5.7.
- The original "tabou_qap" is written by Eric Taillard. http://mistic.heig-vd.ch/taillard
- The source code of "tabou_qap", which is modified by Ikki, is here:
	gate:/home/ikki/work/tools/taillard/tabou_qap.cpp


======================================================================
2. Layout
======================================================================

"lay2.rb" creates a layout of racks/nodes, and then connects the nodes according to a specified topology.
Run "lay2.rb" with no arguments to see a help message.

[calc0] ~/work/0503_fabien$ ../lay2.rb
Usage:
  ../lay2.rb [Options] Layout Input_file|Topologies...
<snip>

----------------------------------------------------------------------
2-1. Input
----------------------------------------------------------------------

See an example command line:

[calc0] ~/work/0503_fabien$ ../lay2.rb -c 64r4 torus-2-2-4-4

The "-c" option creates additional output files, namely "*.clu.*", so that you skip using "clust.R" (described below).

The 1st argument ("64r4") means that there are 64 nodes and a rack stores 4 nodes; thus there are 64/4=16 racks in total. By default the racks are arranged in a square-numbered layout (4x4 in this case) on a floor. If you need an arbitrary arrangement of racks, give a "--layout" option like "--layout 8x2".

The 2nd argument ("torus-2-2-4-4") means that the nodes are connected in 4-D torus topology with a dimenstion of 2x2x4x4.An edgelist file can also be given here to connect the nodes with the edges listed in that file. Multiple topologies or files (separated by space) can be given to create a union of them. 

----------------------------------------------------------------------
2-2. Standard Output
----------------------------------------------------------------------

It displays a tab-separated record as follows. You can copy & paste it onto Excel.

64r4+torus-2-2-4-4	246576.16	54576.16	192000.00	0.00	89920	192	468.33

The 1st column is the parameters.
The 2nd column is the total cost (246576.16 dollars).
The 3rd column is the cable cost (54576.16 dollars).
The 4th column is the switch cost (192000.00 dollars).
The 5th column is reserved.
The 6th column is the total length of cables (89920 cm).
The 7th column is the number of cables (192 cables).
The 8th column is the average length of a cable (468.33 cm).

The output is done in line #580 of "lay2.rb". You may change it as you like.

----------------------------------------------------------------------
2-3. Generated Files
----------------------------------------------------------------------

It generates 2 files (or 4 files given "-c" option) after execution.

[calc0] ~/work/0503_fabien$ ls
64r4.coord
64r4+torus-2-2-4-4.edges
64r4+torus-2-2-4-4.clu.edges
64r4+torus-2-2-4-4.clu.log

"*.coord" records the physical layout of nodes/racks. It includes a line like "31 7 180 210" which means "the node #31 is stored in the rack #7 and is located at x=180cm y=210cm on the floor".

"*.edges" records the per-node edgelist, i.e. the topological connections between the nodes. It includes a line like "33 45 580" which means "the nodes #33 and #45 are connected with a cable of 580cm long".

The following 2 files are generated only if the "-c" option is given. They are basically equivalent to the files generated by "clust.R" with "sequential" clustering method (described below).

"*.clu.edges" records the per-rack edgelist, i.e. the topological connections between the racks, being sequentially clustered. It includes a line like "9 13 4" which means "the racks #9 and #13 are connected with 4 cables".

"*.clu.log" has an additional information which is required later by "alloc4.rb".


======================================================================
3. Clustering
======================================================================

"clust.R" performs sophisticated graph clustering techniques. It's purely graph-theoric and does not consider the physical locations of the racks.

----------------------------------------------------------------------
3-1. Input
----------------------------------------------------------------------

See an example command line:

[calc0] ~/work/0503_fabien$ R --slave -f ../clust.R --args 64r4+torus-2-2-4-4.edges ward 4 png

The options "--slave -f" and "--args" are mandatory. See R documentation for their meanings.

The 1st argument ("64r4+torus-2-2-4-4.edges") specifies the per-node edgelist, i.e. the topological connections between nodes.

The 2nd argument ("ward") specifies the clustering method. See line #143 of "clust.R" for the complete list of available methods.

The 3rd argument ("4") specifies the cluster size, i.e. the maximum number of nodes in a cluster.

The 4th argument ("png"), if exists, renders the graphs before/after being clustered. This is only for debugging and demonstration purpose; omit this argument when running a bunch of clusterings.

----------------------------------------------------------------------
3-2. Standard Output
----------------------------------------------------------------------

It displays a tab-separated record as follows. You can copy & paste it onto Excel.

64r4+torus-2-2-4-4	ward	4	64	192	6	6	3.04761904761905	16	32	128	0.270833333333333	0.1520708 secs	2014-05-03 19:37:45

The 1st column is the parameters.
The 2nd column is the clustering method.
The 3rd column is the cluster size (4 nodes/cluster).
The 4th column is the number of nodes (64 nodes).
The 5th column is the number of edges between nodes (192).
The 6th column is the degree (6).
The 7th column is the diameter (6 hops).
The 8th column is the average path length (3.04761904761905 hops).
The 9th column is the number of racks (16 racks).
The 10th column is the number of inter-rack edges between racks (32).
The 11th column is the number of inter-rack edges between nodes (128).
The 12th column is the modularity (0.270833333333333).
The 13th column is null.
The 14th column is the elapsed time (0.1520708 seconds).
The 15th column is the finished time (2014-05-03 19:37:45).

The output is done in line #216 of "clust.R". You may change it as you like.

----------------------------------------------------------------------
3-3. Generated Files
----------------------------------------------------------------------

It generates 2 files (or 5 files given "png" option) after execution.

[calc0] ~/work/0503_fabien$ ls
64r4+torus-2-2-4-4.ward-4.edges
64r4+torus-2-2-4-4.ward-4.log
64r4+torus-2-2-4-4.ward-4.dend.png
64r4+torus-2-2-4-4.ward-4.node.png
64r4+torus-2-2-4-4.ward-4.rack.png

"*.*-*.edges" records the per-rack edgelist, i.e. the topological connections between racks. It includes a line like "3 7 8.000000" which means "the racks #3 and #7 are connected with 8 cables".

"*.*-*.log" has an additional information which is required later by "alloc4.rb".

The following 3 files are generated only if "png" option is given.

"*.*-*.dend.png" is the dendrogram of the clustering.

"*.*-*.node.png" is the rendered per-node graph (before being clustered).

"*.*-*.rack.png" is the rendered per-rack graph (after being clustered).


======================================================================
4. Allocation
======================================================================

"alloc4.rb" optimizes the layout of the racks on the floor.
"tabou_qap", which is a solver for a quadratic assignment problem, must exist in the same directory to perform the optimization.
Run "alloc4.rb" with no arguments to see a help message.

[calc0] ~/work/0503_fabien$ ../alloc4.rb
Usage:
  ../alloc4.rb [Options] Input_file Objective Method
<snip>

----------------------------------------------------------------------
4-1. Input
----------------------------------------------------------------------

See an example command line:

[calc0] ~/work/0503_fabien$ ../alloc4.rb --edge 64r4+torus-2-2-4-4.edges 64r4+torus-2-2-4-4.ward-4.edges ca ts

The "--edge" option ("--edge 64r4+torus-2-2-4-4.edges") specifies the per-node edgelist file genereted by "lay2.rb".

The 1st argument ("64r4+torus-2-2-4-4.ward-4.edges") specifies the per-rack edgelist file genereted by "clust.R" or by "lay2.rb" with "-c" option.

The 2nd argument ("ca") specifies the objective function, which can be "ca" (cable length [cm]), "po" (power consumption [mW]) or "en" (energy consumption [pJ] considering traffic). You may change their parameters by editing the corresponding methods located at the beginning of "alloc4.rb".

The 3rd argument ("ts") gives the optimization method, which can be "base" (baseline non-optimized) or "ts" (optimized by Taboo Search).

Note:
- As the optimization takes a long time, "alloc4.rb" avoids running the solver multiple times. When a corresponding log file exists in the working directory, it just reads the log file and reproduce the results. Use "-f" option to force to re-run the solver.

----------------------------------------------------------------------
4-2. Standard Output
----------------------------------------------------------------------

It displays a tab-separated record as follows. You can copy & paste it onto Excel.

64r4+torus-2-2-4-4.ward-4.ca-ts 16	25920	89920	1452800	0

The 1st column is the parameters.
The 2nd column is the number of racks (16).
The 3rd column is the objective function value (25920).
The 4th column is the total cable length (89920 cm).
The 5th column is the total power consumption (1452800 mW).
The 6th column is the total energy consumption (0 pJ). "--traffic" option is required to calculate the energy.

The output is done in line #228 of "alloc4.rb". You may change it as you like.

----------------------------------------------------------------------
4-3. Generated Files
----------------------------------------------------------------------

It generates 2 files after execution.

[calc0] ~/work/0503_fabien$ ls
64r4+torus-2-2-4-4.ward-4.ca-ts.log
64r4+torus-2-2-4-4.ward-4.ca-ts.coord
64r4+torus-2-2-4-4.ward-4.ca-ts.edges

"*.*-*.*-*.log" includes a line like "@51 51840 [14,1,2,0,15,13,6,3,4,12,9,8,7,5,11,10]", which means "at the 51st iteration the best solution with cost 51840 was found, where the rack #14 is assigned at the first location on the floor (upper-left corner), rack #1 is assigned at the second location, etc.". Note that the objective function value = cost / 2.

The following 2 files are generated only if the "--edge" option is given. 

"*.*-*.*-*.coord" records the physical layout of nodes/racks. It includes a line like "31 10 180 630", which means "the node #31 is stored in the rack #10 and is located at x=180cm y=630cm on the floor".

"*.*-*.*-*.edges" records the per-node edgelist. It includes a line like "43 59 880", which means "the nodes #43 and #59 are connected with a cable of 880cm long". Its 3rd column value changes according to the objective function.


======================================================================
5. Running in Parallel
======================================================================

Use GNU Parallel. Example:

[gate] ~/work/0503_fabien$ cat ~/.parallel/config
--sshlogin calc3,calc2,calc1,calc0
--workdir .
--nice 10
--progress

[gate] ~/work/0503_fabien$ cat lay.sh
../lay2.rb -f -c 16r4 hc-4
../lay2.rb -f -c 32r4 hc-5
../lay2.rb -f -c 64r4 hc-6
../lay2.rb -f -c 128r4 hc-7
../lay2.rb -f -c 256r4 hc-8

[gate] ~/work/0503_fabien$ parallel -a lay.sh > lay.tsv
<snip>

[gate] ~/work/0503_fabien$ cat lay.tsv
16r4+hc-4	38781.04	6781.04	32000.00	0.00	11760	32	367.50
32r4+hc-5	103436.64	23436.64	80000.00	0.00	36760	80	459.50
64r4+hc-6	252284.16	60284.16	192000.00	0.00	89920	192	468.33
128r4+hc-7	604488.72	156488.72	448000.00	0.00	266880	448	595.71
256r4+hc-8	1402096.64	378096.64	1024000.00	0.00	600320	1024	586.25

[gate] ~/work/0503_fabien$ cat clust.sh
R --slave -f ../clust.R --args 16r4+hc-4.edges ward 4
R --slave -f ../clust.R --args 32r4+hc-5.edges ward 4
R --slave -f ../clust.R --args 64r4+hc-6.edges ward 4
R --slave -f ../clust.R --args 128r4+hc-7.edges ward 4
R --slave -f ../clust.R --args 256r4+hc-8.edges ward 4

[gate] ~/work/0503_fabien$ parallel -a clust.sh > clust.tsv
<snip>

[gate] ~/work/0503_fabien$ cat clust.tsv
16r4+hc-4	ward	4	16	32	4	4	2.13333333333333	4	4	16	0.25		0.03179598 secs	2014-05-03 19:44:18
64r4+hc-6	ward	4	64	192	6	6	3.04761904761905	16	32	128	0.270833333333333		0.03609657 secs	2014-05-03 19:44:18
32r4+hc-5	ward	4	32	80	5	5	2.58064516129032	8	12	48	0.275		0.03360558 secs	2014-05-03 19:44:18
128r4+hc-7	ward	4	128	448	7	7	3.52755905511811	32	80	320	0.254464285714286		0.04560876 secs	2014-05-03 19:44:18
256r4+hc-8	ward	4	256	1024	8	8	4.0156862745098	64	192	768	0.234375		0.08696222 secs	2014-05-03 19:44:18

[gate] ~/work/0503_fabien$ cat alloc.sh
../alloc4.rb --edge 16r4+hc-4.edges 16r4+hc-4.ward-4.edges ca ts
../alloc4.rb --edge 16r4+hc-4.edges 32r4+hc-5.ward-4.edges ca ts
../alloc4.rb --edge 64r4+hc-6.edges 64r4+hc-6.ward-4.edges ca ts
../alloc4.rb --edge 256r4+hc-8.edges 128r4+hc-7.ward-4.edges ca ts
../alloc4.rb --edge 256r4+hc-8.edges 256r4+hc-8.ward-4.edges ca ts

[gate] ~/work/0503_fabien$ parallel -a alloc.sh > alloc.tsv
<snip>

[gate] ~/work/0503_fabien$ cat alloc.tsv
16r4+hc-4.ward-4.ca-ts	4	2160	11760	211200	0
32r4+hc-5.ward-4.ca-ts	8	9720	35320	551200	0
64r4+hc-6.ward-4.ca-ts	16	25920	89920	1452800	0
128r4+hc-7.ward-4.ca-ts	32	88800	242400	3513600	0
256r4+hc-8.ward-4.ca-ts	64	241920	600320	8428800	0


======================================================================
6. Drawing Charts on Excel
======================================================================

Just copy & paste the tab-separeted values on Excel worksheet.


That's it. Enjoy!

