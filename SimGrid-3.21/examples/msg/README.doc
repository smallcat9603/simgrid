// This file follows the Doxygen syntax to be included in the
// documentation, but it should remain readable directly.

/** 
 @defgroup msg_examples MSG examples
 @ingroup MSG_API
 @brief Find the MSG example fitting your needs from the extensive set provided in the archive.

  - @ref msg_ex_basics
  - @ref msg_ex_process
  - @ref msg_ex_tracing
    - @ref msg_ex_tracing_user_variables
  - @ref msg_ex_models
    - @ref msg_ex_ns3

@warning MSG was deprecated in SimGrid v3.18. These examples should be
         converted to S4U in the next releases. You really should
         consider using S4U in your next project.

@section msg_ex_basics Basic examples and features

 - <b>Master Workers</b>.
   @ref examples/msg/app-masterworker/app-masterworker.c\n
   Another good old example, where one Master process has a bunch of
   task to dispatch to a set of several Worker processes.

@section msg_ex_process Acting on Processes

  - <b>Creating processes</b>. 
    @ref examples/msg/process-create/process-create.c \n
    Most processes are started from the deployment XML file, but they
    can also be used with the @ref MSG_process_create() function.

@section msg_ex_tracing Tracing and visualization features

Tracing can be activated by various configuration options which
are illustrated in these example. See also the 
@ref tracing_tracing_options "full list of options related to tracing".

It is interesting to run the process-create example with the following
options to see the task executions:

  - <b>Setting Categories</b>.
    @ref examples/msg/trace-categories/trace-categories.c \n
    This example declares several tracing categories
    to that are used to classify its tasks. When the program is executed,
    the tracing mechanism registers the resource utilization of hosts
    and links according to these categories. Recommanded options:
    @verbatim --cfg=tracing:yes --cfg=tracing/categorized:yes --cfg=tracing/uncategorized:yes
    @endverbatim
    
  - <b>Master Workers tracing</b>.
    @ref examples/msg/trace-masterworker/trace-masterworker.c \n
    This is an augmented version of our basic master/worker example
    using several tracing features. It traces resource usage, sorted
    out in several categories; Trace marks and user variables are also
    used. Recommanded options:
    @verbatim --cfg=tracing/categorized:yes --cfg=tracing/uncategorized:yes
    @endverbatim
    
  - <b>Process migration tracing</b>.
    @ref examples/msg/trace-process-migration/trace-process-migration.c \n
    This version is enhanced so that the process migrations can be
    displayed as arrows in a Gantt-chart visualization. Recommanded
    options to that extend:
    @verbatim -cfg=tracing:yes --cfg=tracing/msg/process:yes
    @endverbatim 
    
TODO: These tracing examples should be integrated in the examples to
not duplicate the C files. A full command line to see the result in
the right tool (vite/FrameSoc) should be given along with some
screenshots.

@subsection msg_ex_tracing_user_variables Tracing user variables

You can also attach your own variables to a any resource described in
the platform file. The following examples illustrate this feature.
They have to be run with the following options:
@verbatim --cfg=tracing:yes --cfg=tracing/platform:yes
@endverbatim

  - <b>Attaching variables to Hosts</b>.
    @ref examples/msg/trace-host-user-variables/trace-host-user-variables.c 

  - <b>Attaching variables to Links</b>.
    @ref examples/msg/trace-link-user-variables/trace-link-user-variables.c \n
    The tricky part is that you have to know the name of the link you
    want to enhance with a variable.

  - <b>Attaching variables to network Routes</b>
    @ref examples/msg/trace-route-user-variables/trace-route-user-variables.c \n
    It is often easier to update a given variable for all links of a
    given network path (identified by its source and destination
    hosts) instead of knowing the name of each specific link.

@section msg_ex_models Models-related examples

@subsection msg_ex_ns3 NS3 as a SimGrid Network Model

This example demonstrates how to use the bindings to the Network
Simulator, as explained in @ref pls_ns3. The most
interesting is probably not the C files since they are unchanged from
the other simulations, but the associated files, such as the platform
file to see how to declare a platform to be used with the ns-3 bindings
of SimGrid and the tesh file to see how to actually start a simulation
in these settings.
  
  - @ref examples/msg/network-ns3/network-ns3.c. Simple ping-pong using
    ns-3 instead of the SimGrid network models.

TODO: merge the C files

TODO: show the XML files instead if it's what is interesting. On a "XML example files" page that does not exist yet.

*/

// As a human, you can stop reading at this point. The rest is garbage:
// 
// Every example must be listed in the following, but it's not possible
// to move this content upper as each @example directive seems to eat
// everything until the next */ marker (and the content is placed at the
// top of the example file). 


/**
@example examples/msg/app-masterworker/app-masterworker.c

@example examples/msg/process-create/process-create.c

@example examples/msg/trace-categories/trace-categories.c
@example examples/msg/trace-masterworker/trace-masterworker.c
@example examples/msg/trace-process-migration/trace-process-migration.c
@example examples/msg/trace-host-user-variables/trace-host-user-variables.c
@example examples/msg/trace-link-user-variables/trace-link-user-variables.c
@example examples/msg/trace-route-user-variables/trace-route-user-variables.c

@example examples/msg/network-ns3/network-ns3.c

*/

