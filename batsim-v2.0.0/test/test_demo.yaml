# This script should be called from Batsim's root directory

# If needed, the working directory of this script can be specified within this file
#base_working_directory: ~/proj/batsim

# If needed, the output directory of this script can be specified within this file
base_output_directory: /tmp/batsim_tests/demo

base_variables:
  batsim_dir: ${base_working_directory}

implicit_instances:
  implicit:
    sweep:
      platform :
        - {"name":"homo128", "filename":"${base_output_directory}/platform.xml"}
      workload :
        - {"name":"medium", "filename":"${base_output_directory}/workload.json"}
      algo: ["filler", "easy_bf"]
    generic_instance:
      timeout: 10 # The instance is killed if it takes more than 10 seconds
      working_directory: ${base_working_directory}
      output_directory: ${base_output_directory}/${algo}
      batsim_command: ${BATSIM_BIN:=batsim} -p ${platform[filename]} -w ${workload[filename]} -e ${output_directory}/out --mmax-workload
      sched_command: ${BATSCHED_BIN:=batsched} -v ${algo}
    # These post commands are executed after each instance
    post_commands:
      # Information about jobs
      - |
        #!/usr/bin/env bash
        cat ${output_directory}/analysis.R << EOF
        #!/usr/bin/env Rscript
        library(dplyr)
        library(ggplot2)
        jobs = read.csv('${output_directory}/out_jobs.csv')
        summary(jobs)

        pdf('${output_directory}/scatter_wait_sub.pdf')
        jobs %>% ggplot(aes(x=submission_time, y=waiting_time)) + geom_point()
        dev.off()

        pdf('${output_directory}/hist_wait.pdf')
        jobs %>% ggplot(aes(x=waiting_time)) + geom_histogram()
        dev.off()
        EOF
      - chmod +x ${output_directory}/analysis.R
      - ${output_directory}/analysis.R

# These pre commands are done before executing any instance
commands_before_instances:
  - ${batsim_dir}/test/is_batsim_dir.py ${base_working_directory}
  - ${batsim_dir}/test/clean_output_dir.py ${base_output_directory}
  - cp ${batsim_dir}/platforms/energy_platform_homogeneous_no_net_128.xml ${base_output_directory}/platform.xml
  - cp ${batsim_dir}/workload_profiles/batsim_paper_workload_example.json ${base_output_directory}/workload.json

# These post commands are done once all instances have been executed
commands_after_instances:
  # Visualize results with Evalys
  - |
      #!/usr/bin/env bash

      cat > ${base_output_directory}/analysis.py << EOF
      #!/usr/bin/env python3
      from evalys import *
      from evalys.jobset import *
      from evalys.visu import *
      import matplotlib.pyplot as plt

      easy = JobSet.from_csv('${base_output_directory}/easy_bf/out_jobs.csv')
      filler = JobSet.from_csv('${base_output_directory}/filler/out_jobs.csv')

      fig, ax_list = plt.subplots(2, sharex = True, sharey = False)

      plot_gantt(easy, ax=ax_list[0], title="Easy Backfilling", labels=False)
      plot_gantt(filler, ax=ax_list[1], title="Filler", labels=False)

      plt.savefig('${base_output_directory}/gantts.png')
      EOF
  - chmod +x ${base_output_directory}/analysis.py
  - ${base_output_directory}/analysis.py

  # Visualize results with ViTE
  - vite ${base_output_directory}/easy_bf/out_schedule.trace -e ${base_output_directory}/easy_bf/trace.svg
