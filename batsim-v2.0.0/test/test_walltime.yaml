# This script should be called from Batsim's root directory

# If needed, the working directory of this script can be specified within this file
#base_working_directory: ~/proj/batsim

# If needed, the output directory of this script can be specified within this file
base_output_directory: /tmp/batsim_tests/walltime

base_variables:
  batsim_dir: ${base_working_directory}

implicit_instances:
  implicit:
    sweep:
      platform :
        - {"name":"homo128", "filename":"${batsim_dir}/platforms/energy_platform_homogeneous_no_net_128.xml"}
      workload :
        - {"name":"walltime", "filename":"${batsim_dir}/workload_profiles/walltime_test.json"}
      sched:
        - {"name":"batsched", "cmd":"${BATSCHED_BIN:=batsched} -v filler"}
    generic_instance:
      timeout: 10
      working_directory: ${base_working_directory}
      output_directory: ${base_output_directory}/results/${algo[name]}_${workload[name]}_${platform[name]}
      batsim_command: ${BATSIM_BIN:=batsim} -p ${platform[filename]} -w ${workload[filename]} -e ${output_directory}/out --redis-prefix ${instance_id} --mmax-workload
      sched_command: ${sched[cmd]}

      commands_after_execution:
        - |
            #!/usr/bin/env bash

            cat > ${output_directory}/jobs_analysis.py <<EOF
            #!/usr/bin/env python3
            import pandas as pd
            import sys

            def check_ok_bool(row):
                # Walltime is set and the job execution time is greater than its walltime
                if row['execution_time'] > row['requested_time'] and row['requested_time'] != -1:
                    return False

                # Success -> (finished before walltime OR no walltime set)
                if row['success']:
                    return (row['execution_time'] < row['requested_time']) or (row['requested_time'] == -1)
                # Failure -> walltime reached
                else:
                    return row['execution_time'] >= row['requested_time']

            def check_ok(row):
                return int(check_ok_bool(row))

            jobs = pd.read_csv('${output_directory}/out_jobs.csv')

            jobs['valid'] = jobs.apply(check_ok, axis=1)
            if jobs['valid'].sum() != len(jobs):
                print('Some jobs are invalid!')
                print(jobs[['job_id', 'requested_time', 'execution_time', 'success', 'valid']])
                sys.exit(1)
            else:
                print('All jobs are valid!')
                print(jobs[['job_id', 'requested_time', 'execution_time', 'success', 'valid']])
                sys.exit(0)

            EOF
        - chmod +x ${output_directory}/jobs_analysis.py
        - ${output_directory}/jobs_analysis.py

commands_before_instances:
  - ${batsim_dir}/test/is_batsim_dir.py ${base_working_directory}
  - ${batsim_dir}/test/clean_output_dir.py ${base_output_directory}
