# This script should be called from Batsim's root directory

# If needed, the working directory of this script can be specified within this file
#base_working_directory: ~/proj/batsim

# If needed, the output directory of this script can be specified within this file
base_output_directory: /tmp/batsim_tests/smpi_mapping

base_variables:
  batsim_dir: ${base_working_directory}

implicit_instances:
  implicit:
    sweep:
      platform :
        - {"name":"small", "filename":"${batsim_dir}/platforms/small_platform.xml"}
      workload :
        - {"name":"mapping", "filename":"${batsim_dir}/workload_profiles/test_smpi_mapping.json"}
      algo:
        - {"name":"filler", "algo_name":"filler"}
    generic_instance:
      timeout: 10
      working_directory: ${base_working_directory}
      output_directory: ${base_output_directory}/results/${algo[name]}_${workload[name]}_${platform[name]}
      batsim_command: ${BATSIM_BIN:=batsim} -p ${platform[filename]} -w ${workload[filename]} -e ${output_directory}/out --redis-prefix ${instance_id} --mmax-workload
      sched_command: ${BATSCHED_BIN:=batsched} -v ${algo[algo_name]}

      commands_after_execution:
        # Let's check that the jobs have consistent execution times
        - |
            #!/usr/bin/env bash

            source ${output_directory}/variables.bash

            cat > ${output_directory}/jobs_analysis.py <<EOF
            #!/usr/bin/env python3
            from __future__ import print_function
            import pandas as pd
            import sys

            # Let's get when jobs have been released
            jobs = pd.read_csv('${output_directory}/out_jobs.csv')

            # Jobs 1 and 2 should have similar execution times
            a = 0
            b = 1
            if abs(jobs['execution_time'][a] - jobs['execution_time'][b]) > 1:
                print("Jobs {id1} and {id2} should have similar runtimes, but "
                      "they have not ({runtime1}, {runtime2}).".format(
                    id1 = jobs['job_id'][a], id2= jobs['job_id'][b],
                    runtime1= jobs['execution_time'][a],
                    runtime2= jobs['execution_time'][b]))
                sys.exit(1)
            else:
                print("OK. Jobs {id1} and {id2} have similar runtimes "
                      "({runtime1}, {runtime2}).".format(
                    id1 = jobs['job_id'][a], id2= jobs['job_id'][b],
                    runtime1= jobs['execution_time'][a],
                    runtime2= jobs['execution_time'][b]))

            # Jobs 3 and 4 should have similar execution times
            a = 2
            b = 3
            if abs(jobs['execution_time'][a] - jobs['execution_time'][b]) > 1:
                print("Jobs {id1} and {id2} should have similar runtimes, but "
                      "they have not ({runtime1}, {runtime2}).".format(
                    id1 = jobs['job_id'][a], id2= jobs['job_id'][b],
                    runtime1= jobs['execution_time'][a],
                    runtime2= jobs['execution_time'][b]))
                sys.exit(1)
            else:
                print("OK. Jobs {id1} and {id2} have similar runtimes "
                      "({runtime1}, {runtime2}).".format(
                    id1 = jobs['job_id'][a], id2= jobs['job_id'][b],
                    runtime1= jobs['execution_time'][a],
                    runtime2= jobs['execution_time'][b]))

            a = 0
            b = 2
            if abs(jobs['execution_time'][a] - jobs['execution_time'][b]) <= 100:
                print("OK. Jobs {id1} and {id2} should have different runtimes,"
                      " but they have not ({runtime1}, {runtime2}).".format(
                    id1 = jobs['job_id'][a], id2= jobs['job_id'][b],
                    runtime1= jobs['execution_time'][a],
                    runtime2= jobs['execution_time'][b]))
                sys.exit(1)
            else:
                print("OK. Jobs {id1} and {id2} have different runtimes "
                      "({runtime1}, {runtime2}).".format(
                    id1 = jobs['job_id'][a], id2= jobs['job_id'][b],
                    runtime1= jobs['execution_time'][a],
                    runtime2= jobs['execution_time'][b]))

            sys.exit(0)
            EOF
        - chmod +x ${output_directory}/jobs_analysis.py
        - ${output_directory}/jobs_analysis.py

commands_before_instances:
  - ${batsim_dir}/test/is_batsim_dir.py ${base_working_directory}
  - ${batsim_dir}/test/clean_output_dir.py ${base_output_directory}
