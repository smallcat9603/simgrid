# This script should be called from Batsim's root directory

# If needed, the working directory of this script can be specified within this file
#base_working_directory: ~/proj/batsim

# If needed, the output directory of this script can be specified within this file
base_output_directory: /tmp/batsim_tests/sequence_delay

base_variables:
  batsim_dir: ${base_working_directory}

implicit_instances:
  implicit:
    sweep:
      platform :
        - {"name":"small", "filename":"${batsim_dir}/platforms/small_platform.xml"}
      workload :
        - {"name":"sequence_delay", "filename":"${batsim_dir}/workload_profiles/test_sequence_delay.json"}
      algo:
        - {"name":"filler", "algo_name":"filler"}
    generic_instance:
      timeout: 10
      working_directory: ${base_working_directory}
      output_directory: ${base_output_directory}/results/${instance_id}
      batsim_command: ${BATSIM_BIN:=batsim} -p ${platform[filename]} -w ${workload[filename]} -e ${output_directory}/out --mmax-workload -vdebug --config-file ${output_directory}/batsim.conf
      sched_command: ${BATSCHED_BIN:=batsched} -v ${algo[algo_name]}
      commands_before_execution:
        # Batsim config file (redis disabled)
        - |
              #!/usr/bin/env bash
              cat > ${output_directory}/batsim.conf << EOF
              {
                "redis": {
                  "enabled": false
                }
              }
              EOF
      commands_after_execution:
        # Let's check that Batsim sent the jobs in the right order
        - |
            #!/usr/bin/env bash
            source ${output_directory}/variables.bash

            cat > ${output_directory}/jobs_analysis.py <<EOF
            #!/usr/bin/env python3
            import json
            from math import isclose
            import pandas as pd
            import sys

            jobs = pd.read_csv('${output_directory}/out_jobs.csv')
            epsilon = 0.1

            exit_status = 0

            for _,job in jobs.iterrows():
                jid, jsuc, jrt = job['job_id'], job['success'], job['execution_time']
                if jid in {1,2,3,4,5}:
                    if jsuc != 1:
                        print('Job {} should be successful...'.format(jsuc))
                        exit_status = 1
                    if not isclose(jrt, 30, abs_tol=epsilon):
                        print('Job {} should take {} s (took {})'.format(jid, 30, jrt))
                        exit_status = 1
                elif jid in {11,12,13,14,15}:
                    if jsuc != 0:
                        print('Job {} should NOT be successful...'.format(jsuc))
                        exit_status = 1
                    if not isclose(jrt, 20, abs_tol=epsilon):
                        print('Job {} should take {} s (took {})'.format(jid, 20, jrt))
                        exit_status = 1
                else:
                    print('Job {} is unknown!'.format(jid))
                    exit_status = 1

            if len(jobs) != 10:
                print('There should be {} jobs (got {})'.format(10, len(jobs)))
                exit_status = 1

            sys.exit(exit_status)

            EOF
        - chmod +x ${output_directory}/jobs_analysis.py
        - ${output_directory}/jobs_analysis.py


commands_before_instances:
  - ${batsim_dir}/test/is_batsim_dir.py ${base_working_directory}
  - ${batsim_dir}/test/clean_output_dir.py ${base_output_directory}

