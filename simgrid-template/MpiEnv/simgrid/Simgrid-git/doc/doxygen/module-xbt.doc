/** @addtogroup XBT_API

   The XBT functionalities fall into several categories:
    - Portability support
      - \ref XBT_syscall
      - \ref XBT_str
    - Grounding features
      - \ref XBT_ex
      - \ref XBT_log
      - \ref XBT_error
      - \ref XBT_config
      - \ref XBT_mallocator
      - \ref XBT_cunit
    - Data structures
      - \ref XBT_dynar
      - \ref XBT_dict
      - \ref XBT_set
        Data are associated to both an ID (0(1) search) and a name
      - \ref XBT_fifo
      - \ref XBT_queue
      - \ref XBT_swag
      - \ref XBT_heap
      - \ref XBT_peer
    - \ref XBT_misc
      - \ref XBT_graph

  @{ */
   /** @defgroup XBT_grounding   Grounding features */
   /** @defgroup XBT_adt         Usual data structures */
   /** @defgroup XBT_misc        Misc general purposes library components */
/** @} */


########################################################################


/** @addtogroup XBT_grounding

  Grounding features are the basement of SimGrid. You'll find portable (and
  secure) wrappers to the malloc-like functions, logging support, error
  reporting features, etc.

  @{ */

     /** @defgroup XBT_syscall Malloc and friends */
     /** @defgroup XBT_str     String related functions */
     /** @defgroup XBT_ex     Exception support */
     /** @defgroup XBT_log    Logging support */
     /** @defgroup XBT_error  Assert macro familly */
     /** @defgroup XBT_config Configuration support */
     /** @defgroup XBT_mallocator Mallocators */
     /** @defgroup XBT_cunit      Unit testing support */
/** @} */


########################################################################

/** @addtogroup XBT_adt

  Here are the basic data containers that every C programmer rewrites one day.
  You won't need to do so yourself, you lucky one, because we did it for you.

  @{ */
     /** @defgroup XBT_dynar  Dynar: generic dynamic array */
     /** @defgroup XBT_dict   Dict: generic dictionnary */
     /** @defgroup XBT_set    Set: generic set datatype */
     /** @defgroup XBT_fifo   Fifo: generic workqueue */
     /** @defgroup XBT_swag   Swag: O(1) set datatype */
     /** @defgroup XBT_heap Heap: generic heap data structure */
     /** @defgroup XBT_dd Data description */
/** @} */


########################################################################

/** @addtogroup XBT_misc

  Here are several general purposes library components designed specially
  for you, you lucky one.


  @{ */
     /** @defgroup XBT_graph General purpose graph library */
     /** @defgroup XBT_parmap Parallel map */    
     /** @defgroup XBT_peer Peer */	
     /** @defgroup XBT_queue Queue */
     /** @defgroup XBT_sock Sock */	
     /** @defgroup XBT_synchro Synchro stuff */	
     /** @defgroup XBT_thread Thread stuff */	
     /** @defgroup XBT_context Portable context implementation */		
     /** @defgroup XBT_replay Replay */
/** @} */ 

/* ************************* *
 * * PORTABILITY-INTERNALS * * (not included in documentation)
 * ************************* */

 /** \addtogroup XBT_context Portable context implementation
  *  \brief Contexts are a higher level system than <tt>setjump/longjmp</tt>
  *  for non-preemptible threads.
  *
  *  You shouldn't use it directly since it is merely intended to ease the
  *  implementation of the several programmation environment of the
  *  SimGrid toolkit (namely, \ref MSG_API and \ref SMPI_API).
  *
  *  You should use those environments instead.
  */

