/**********************************************************************/
/* File generated by src/simix/simcalls.py from src/simix/simcalls.in */
/*                                                                    */
/*                    DO NOT EVER CHANGE THIS FILE                    */
/*                                                                    */
/* change simcalls specification in src/simix/simcalls.in             */
/**********************************************************************/

/*
 * Note that the name comes from http://en.wikipedia.org/wiki/Popping
 * Indeed, the control flow is doing a strange dance in there.
 *
 * That's not about http://en.wikipedia.org/wiki/Poop, despite the odor :)
 */


static inline const char* simcall_host_get_by_name__get__name(smx_simcall_t simcall) {
  return  simcall->args[0].cc;
}
static inline void simcall_host_get_by_name__set__name(smx_simcall_t simcall, const char* arg) {
    simcall->args[0].cc = arg;
}
static inline smx_host_t simcall_host_get_by_name__get__result(smx_simcall_t simcall){
    return (smx_host_t) simcall->result.dp;
}
static inline void simcall_host_get_by_name__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_host_t simcall_host_get_name__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_name__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline const char* simcall_host_get_name__get__result(smx_simcall_t simcall){
    return  simcall->result.cc;
}
static inline void simcall_host_get_name__set__result(smx_simcall_t simcall, const char* result){
    simcall->result.cc = result;
}

static inline smx_host_t simcall_host_on__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_on__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_host_t simcall_host_off__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_off__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_host_t simcall_host_get_properties__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_properties__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline xbt_dict_t simcall_host_get_properties__get__result(smx_simcall_t simcall){
    return (xbt_dict_t) simcall->result.dp;
}
static inline void simcall_host_get_properties__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_host_t simcall_host_get_core__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_core__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_host_get_core__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_host_get_core__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_host_t simcall_host_get_process_list__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_process_list__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline xbt_swag_t simcall_host_get_process_list__get__result(smx_simcall_t simcall){
    return (xbt_swag_t) simcall->result.dp;
}
static inline void simcall_host_get_process_list__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_host_t simcall_host_get_speed__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_speed__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_host_get_speed__get__result(smx_simcall_t simcall){
    return  simcall->result.d;
}
static inline void simcall_host_get_speed__set__result(smx_simcall_t simcall, double result){
    simcall->result.d = result;
}

static inline smx_host_t simcall_host_get_available_speed__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_available_speed__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_host_get_available_speed__get__result(smx_simcall_t simcall){
    return  simcall->result.d;
}
static inline void simcall_host_get_available_speed__set__result(smx_simcall_t simcall, double result){
    simcall->result.d = result;
}

static inline smx_host_t simcall_host_get_state__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_state__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_host_get_state__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_host_get_state__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_host_t simcall_host_get_current_power_peak__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_current_power_peak__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_host_get_current_power_peak__get__result(smx_simcall_t simcall){
    return  simcall->result.d;
}
static inline void simcall_host_get_current_power_peak__set__result(smx_simcall_t simcall, double result){
    simcall->result.d = result;
}

static inline smx_host_t simcall_host_get_power_peak_at__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_power_peak_at__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_host_get_power_peak_at__get__pstate_index(smx_simcall_t simcall) {
  return  simcall->args[1].i;
}
static inline void simcall_host_get_power_peak_at__set__pstate_index(smx_simcall_t simcall, int arg) {
    simcall->args[1].i = arg;
}
static inline double simcall_host_get_power_peak_at__get__result(smx_simcall_t simcall){
    return  simcall->result.d;
}
static inline void simcall_host_get_power_peak_at__set__result(smx_simcall_t simcall, double result){
    simcall->result.d = result;
}

static inline smx_host_t simcall_host_get_nb_pstates__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_nb_pstates__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_host_get_nb_pstates__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_host_get_nb_pstates__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_host_t simcall_host_set_power_peak_at__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_set_power_peak_at__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_host_set_power_peak_at__get__pstate_index(smx_simcall_t simcall) {
  return  simcall->args[1].i;
}
static inline void simcall_host_set_power_peak_at__set__pstate_index(smx_simcall_t simcall, int arg) {
    simcall->args[1].i = arg;
}

static inline smx_host_t simcall_host_get_consumed_energy__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_consumed_energy__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_host_get_consumed_energy__get__result(smx_simcall_t simcall){
    return  simcall->result.d;
}
static inline void simcall_host_get_consumed_energy__set__result(smx_simcall_t simcall, double result){
    simcall->result.d = result;
}

static inline const char* simcall_host_execute__get__name(smx_simcall_t simcall) {
  return  simcall->args[0].cc;
}
static inline void simcall_host_execute__set__name(smx_simcall_t simcall, const char* arg) {
    simcall->args[0].cc = arg;
}
static inline smx_host_t simcall_host_execute__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_host_execute__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline double simcall_host_execute__get__computation_amount(smx_simcall_t simcall) {
  return  simcall->args[2].d;
}
static inline void simcall_host_execute__set__computation_amount(smx_simcall_t simcall, double arg) {
    simcall->args[2].d = arg;
}
static inline double simcall_host_execute__get__priority(smx_simcall_t simcall) {
  return  simcall->args[3].d;
}
static inline void simcall_host_execute__set__priority(smx_simcall_t simcall, double arg) {
    simcall->args[3].d = arg;
}
static inline double simcall_host_execute__get__bound(smx_simcall_t simcall) {
  return  simcall->args[4].d;
}
static inline void simcall_host_execute__set__bound(smx_simcall_t simcall, double arg) {
    simcall->args[4].d = arg;
}
static inline unsigned long simcall_host_execute__get__affinity_mask(smx_simcall_t simcall) {
  return  simcall->args[5].ul;
}
static inline void simcall_host_execute__set__affinity_mask(smx_simcall_t simcall, unsigned long arg) {
    simcall->args[5].ul = arg;
}
static inline smx_synchro_t simcall_host_execute__get__result(smx_simcall_t simcall){
    return (smx_synchro_t) simcall->result.dp;
}
static inline void simcall_host_execute__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline const char* simcall_host_parallel_execute__get__name(smx_simcall_t simcall) {
  return  simcall->args[0].cc;
}
static inline void simcall_host_parallel_execute__set__name(smx_simcall_t simcall, const char* arg) {
    simcall->args[0].cc = arg;
}
static inline int simcall_host_parallel_execute__get__host_nb(smx_simcall_t simcall) {
  return  simcall->args[1].i;
}
static inline void simcall_host_parallel_execute__set__host_nb(smx_simcall_t simcall, int arg) {
    simcall->args[1].i = arg;
}
static inline smx_host_t* simcall_host_parallel_execute__get__host_list(smx_simcall_t simcall) {
  return (smx_host_t*) simcall->args[2].dp;
}
static inline void simcall_host_parallel_execute__set__host_list(smx_simcall_t simcall, void* arg) {
    simcall->args[2].dp = arg;
}
static inline double* simcall_host_parallel_execute__get__computation_amount(smx_simcall_t simcall) {
  return (double*) simcall->args[3].dp;
}
static inline void simcall_host_parallel_execute__set__computation_amount(smx_simcall_t simcall, void* arg) {
    simcall->args[3].dp = arg;
}
static inline double* simcall_host_parallel_execute__get__communication_amount(smx_simcall_t simcall) {
  return (double*) simcall->args[4].dp;
}
static inline void simcall_host_parallel_execute__set__communication_amount(smx_simcall_t simcall, void* arg) {
    simcall->args[4].dp = arg;
}
static inline double simcall_host_parallel_execute__get__amount(smx_simcall_t simcall) {
  return  simcall->args[5].d;
}
static inline void simcall_host_parallel_execute__set__amount(smx_simcall_t simcall, double arg) {
    simcall->args[5].d = arg;
}
static inline double simcall_host_parallel_execute__get__rate(smx_simcall_t simcall) {
  return  simcall->args[6].d;
}
static inline void simcall_host_parallel_execute__set__rate(smx_simcall_t simcall, double arg) {
    simcall->args[6].d = arg;
}
static inline smx_synchro_t simcall_host_parallel_execute__get__result(smx_simcall_t simcall){
    return (smx_synchro_t) simcall->result.dp;
}
static inline void simcall_host_parallel_execute__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_synchro_t simcall_host_execution_destroy__get__execution(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_host_execution_destroy__set__execution(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_synchro_t simcall_host_execution_cancel__get__execution(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_host_execution_cancel__set__execution(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_synchro_t simcall_host_execution_get_remains__get__execution(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_host_execution_get_remains__set__execution(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_host_execution_get_remains__get__result(smx_simcall_t simcall){
    return  simcall->result.d;
}
static inline void simcall_host_execution_get_remains__set__result(smx_simcall_t simcall, double result){
    simcall->result.d = result;
}

static inline smx_synchro_t simcall_host_execution_get_state__get__execution(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_host_execution_get_state__set__execution(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline e_smx_state_t simcall_host_execution_get_state__get__result(smx_simcall_t simcall){
    return (e_smx_state_t) simcall->result.i;
}
static inline void simcall_host_execution_get_state__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_synchro_t simcall_host_execution_set_priority__get__execution(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_host_execution_set_priority__set__execution(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_host_execution_set_priority__get__priority(smx_simcall_t simcall) {
  return  simcall->args[1].d;
}
static inline void simcall_host_execution_set_priority__set__priority(smx_simcall_t simcall, double arg) {
    simcall->args[1].d = arg;
}

static inline smx_synchro_t simcall_host_execution_set_bound__get__execution(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_host_execution_set_bound__set__execution(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_host_execution_set_bound__get__bound(smx_simcall_t simcall) {
  return  simcall->args[1].d;
}
static inline void simcall_host_execution_set_bound__set__bound(smx_simcall_t simcall, double arg) {
    simcall->args[1].d = arg;
}

static inline smx_synchro_t simcall_host_execution_set_affinity__get__execution(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_host_execution_set_affinity__set__execution(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_host_t simcall_host_execution_set_affinity__get__ws(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_host_execution_set_affinity__set__ws(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline unsigned long simcall_host_execution_set_affinity__get__mask(smx_simcall_t simcall) {
  return  simcall->args[2].ul;
}
static inline void simcall_host_execution_set_affinity__set__mask(smx_simcall_t simcall, unsigned long arg) {
    simcall->args[2].ul = arg;
}

static inline smx_synchro_t simcall_host_execution_wait__get__execution(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_host_execution_wait__set__execution(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_host_execution_wait__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_host_execution_wait__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_host_t simcall_host_get_mounted_storage_list__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_mounted_storage_list__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline xbt_dict_t simcall_host_get_mounted_storage_list__get__result(smx_simcall_t simcall){
    return (xbt_dict_t) simcall->result.dp;
}
static inline void simcall_host_get_mounted_storage_list__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_host_t simcall_host_get_attached_storage_list__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_attached_storage_list__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline xbt_dynar_t simcall_host_get_attached_storage_list__get__result(smx_simcall_t simcall){
    return (xbt_dynar_t) simcall->result.dp;
}
static inline void simcall_host_get_attached_storage_list__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_host_t simcall_host_get_params__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_get_params__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline ws_params_t simcall_host_get_params__get__params(smx_simcall_t simcall) {
  return (ws_params_t) simcall->args[1].dp;
}
static inline void simcall_host_get_params__set__params(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}

static inline smx_host_t simcall_host_set_params__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_host_set_params__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline ws_params_t simcall_host_set_params__get__params(smx_simcall_t simcall) {
  return (ws_params_t) simcall->args[1].dp;
}
static inline void simcall_host_set_params__set__params(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}

static inline const char* simcall_vm_create__get__name(smx_simcall_t simcall) {
  return  simcall->args[0].cc;
}
static inline void simcall_vm_create__set__name(smx_simcall_t simcall, const char* arg) {
    simcall->args[0].cc = arg;
}
static inline smx_host_t simcall_vm_create__get__ind_pm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_vm_create__set__ind_pm(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline smx_host_t simcall_vm_create__get__result(smx_simcall_t simcall){
    return (smx_host_t) simcall->result.dp;
}
static inline void simcall_vm_create__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_host_t simcall_vm_start__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_start__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_host_t simcall_vm_get_state__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_get_state__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_vm_get_state__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_vm_get_state__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_host_t simcall_vm_migrate__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_migrate__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_host_t simcall_vm_migrate__get__ind_dst_pm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_vm_migrate__set__ind_dst_pm(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}

static inline smx_host_t simcall_vm_get_pm__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_get_pm__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline void* simcall_vm_get_pm__get__result(smx_simcall_t simcall){
    return  simcall->result.dp;
}
static inline void simcall_vm_get_pm__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_host_t simcall_vm_set_bound__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_set_bound__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_vm_set_bound__get__bound(smx_simcall_t simcall) {
  return  simcall->args[1].d;
}
static inline void simcall_vm_set_bound__set__bound(smx_simcall_t simcall, double arg) {
    simcall->args[1].d = arg;
}

static inline smx_host_t simcall_vm_set_affinity__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_set_affinity__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_host_t simcall_vm_set_affinity__get__ind_pm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_vm_set_affinity__set__ind_pm(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline unsigned long simcall_vm_set_affinity__get__mask(smx_simcall_t simcall) {
  return  simcall->args[2].ul;
}
static inline void simcall_vm_set_affinity__set__mask(smx_simcall_t simcall, unsigned long arg) {
    simcall->args[2].ul = arg;
}

static inline smx_host_t simcall_vm_destroy__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_destroy__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_host_t simcall_vm_suspend__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_suspend__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_host_t simcall_vm_resume__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_resume__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_host_t simcall_vm_shutdown__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_shutdown__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_host_t simcall_vm_save__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_save__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_host_t simcall_vm_restore__get__ind_vm(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[0].dp;
}
static inline void simcall_vm_restore__set__ind_vm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_process_t* simcall_process_create__get__process(smx_simcall_t simcall) {
  return (smx_process_t*) simcall->args[0].dp;
}
static inline void simcall_process_create__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline const char* simcall_process_create__get__name(smx_simcall_t simcall) {
  return  simcall->args[1].cc;
}
static inline void simcall_process_create__set__name(smx_simcall_t simcall, const char* arg) {
    simcall->args[1].cc = arg;
}
static inline xbt_main_func_t simcall_process_create__get__code(smx_simcall_t simcall) {
  return (xbt_main_func_t) simcall->args[2].fp;
}
static inline void simcall_process_create__set__code(smx_simcall_t simcall, FPtr arg) {
    simcall->args[2].fp = arg;
}
static inline void* simcall_process_create__get__data(smx_simcall_t simcall) {
  return  simcall->args[3].dp;
}
static inline void simcall_process_create__set__data(smx_simcall_t simcall, void* arg) {
    simcall->args[3].dp = arg;
}
static inline const char* simcall_process_create__get__hostname(smx_simcall_t simcall) {
  return  simcall->args[4].cc;
}
static inline void simcall_process_create__set__hostname(smx_simcall_t simcall, const char* arg) {
    simcall->args[4].cc = arg;
}
static inline double simcall_process_create__get__kill_time(smx_simcall_t simcall) {
  return  simcall->args[5].d;
}
static inline void simcall_process_create__set__kill_time(smx_simcall_t simcall, double arg) {
    simcall->args[5].d = arg;
}
static inline int simcall_process_create__get__argc(smx_simcall_t simcall) {
  return  simcall->args[6].i;
}
static inline void simcall_process_create__set__argc(smx_simcall_t simcall, int arg) {
    simcall->args[6].i = arg;
}
static inline char** simcall_process_create__get__argv(smx_simcall_t simcall) {
  return (char**) simcall->args[7].dp;
}
static inline void simcall_process_create__set__argv(smx_simcall_t simcall, void* arg) {
    simcall->args[7].dp = arg;
}
static inline xbt_dict_t simcall_process_create__get__properties(smx_simcall_t simcall) {
  return (xbt_dict_t) simcall->args[8].dp;
}
static inline void simcall_process_create__set__properties(smx_simcall_t simcall, void* arg) {
    simcall->args[8].dp = arg;
}
static inline int simcall_process_create__get__auto_restart(smx_simcall_t simcall) {
  return  simcall->args[9].i;
}
static inline void simcall_process_create__set__auto_restart(smx_simcall_t simcall, int arg) {
    simcall->args[9].i = arg;
}

static inline smx_process_t simcall_process_kill__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_kill__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline int simcall_process_killall__get__reset_pid(smx_simcall_t simcall) {
  return  simcall->args[0].i;
}
static inline void simcall_process_killall__set__reset_pid(smx_simcall_t simcall, int arg) {
    simcall->args[0].i = arg;
}

static inline smx_process_t simcall_process_cleanup__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_cleanup__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_process_t simcall_process_change_host__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_change_host__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_host_t simcall_process_change_host__get__dest(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_process_change_host__set__dest(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}

static inline smx_process_t simcall_process_suspend__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_suspend__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_process_t simcall_process_resume__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_resume__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline int simcall_process_count__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_process_count__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_process_t simcall_process_get_PID__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_get_PID__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_process_get_PID__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_process_get_PID__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_process_t simcall_process_get_PPID__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_get_PPID__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_process_get_PPID__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_process_get_PPID__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_process_t simcall_process_get_data__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_get_data__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline void* simcall_process_get_data__get__result(smx_simcall_t simcall){
    return  simcall->result.dp;
}
static inline void simcall_process_get_data__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_process_t simcall_process_set_data__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_set_data__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline void* simcall_process_set_data__get__data(smx_simcall_t simcall) {
  return  simcall->args[1].dp;
}
static inline void simcall_process_set_data__set__data(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}

static inline smx_process_t simcall_process_get_host__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_get_host__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_host_t simcall_process_get_host__get__result(smx_simcall_t simcall){
    return (smx_host_t) simcall->result.dp;
}
static inline void simcall_process_get_host__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_process_t simcall_process_get_name__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_get_name__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline const char* simcall_process_get_name__get__result(smx_simcall_t simcall){
    return  simcall->result.cc;
}
static inline void simcall_process_get_name__set__result(smx_simcall_t simcall, const char* result){
    simcall->result.cc = result;
}

static inline smx_process_t simcall_process_is_suspended__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_is_suspended__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_process_is_suspended__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_process_is_suspended__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_process_t simcall_process_get_properties__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_get_properties__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline xbt_dict_t simcall_process_get_properties__get__result(smx_simcall_t simcall){
    return (xbt_dict_t) simcall->result.dp;
}
static inline void simcall_process_get_properties__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_process_t simcall_process_join__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_join__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_process_join__get__timeout(smx_simcall_t simcall) {
  return  simcall->args[1].d;
}
static inline void simcall_process_join__set__timeout(smx_simcall_t simcall, double arg) {
    simcall->args[1].d = arg;
}
static inline int simcall_process_join__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_process_join__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline double simcall_process_sleep__get__duration(smx_simcall_t simcall) {
  return  simcall->args[0].d;
}
static inline void simcall_process_sleep__set__duration(smx_simcall_t simcall, double arg) {
    simcall->args[0].d = arg;
}
static inline int simcall_process_sleep__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_process_sleep__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_process_t simcall_process_on_exit__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_on_exit__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int_f_pvoid_pvoid_t simcall_process_on_exit__get__fun(smx_simcall_t simcall) {
  return (int_f_pvoid_pvoid_t) simcall->args[1].fp;
}
static inline void simcall_process_on_exit__set__fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[1].fp = arg;
}
static inline void* simcall_process_on_exit__get__data(smx_simcall_t simcall) {
  return  simcall->args[2].dp;
}
static inline void simcall_process_on_exit__set__data(smx_simcall_t simcall, void* arg) {
    simcall->args[2].dp = arg;
}

static inline smx_process_t simcall_process_auto_restart_set__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_auto_restart_set__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_process_auto_restart_set__get__auto_restart(smx_simcall_t simcall) {
  return  simcall->args[1].i;
}
static inline void simcall_process_auto_restart_set__set__auto_restart(smx_simcall_t simcall, int arg) {
    simcall->args[1].i = arg;
}

static inline smx_process_t simcall_process_restart__get__process(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_process_restart__set__process(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_process_t simcall_process_restart__get__result(smx_simcall_t simcall){
    return (smx_process_t) simcall->result.dp;
}
static inline void simcall_process_restart__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline const char* simcall_rdv_create__get__name(smx_simcall_t simcall) {
  return  simcall->args[0].cc;
}
static inline void simcall_rdv_create__set__name(smx_simcall_t simcall, const char* arg) {
    simcall->args[0].cc = arg;
}
static inline smx_rdv_t simcall_rdv_create__get__result(smx_simcall_t simcall){
    return (smx_rdv_t) simcall->result.dp;
}
static inline void simcall_rdv_create__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_rdv_t simcall_rdv_destroy__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[0].dp;
}
static inline void simcall_rdv_destroy__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_rdv_t simcall_rdv_comm_count_by_host__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[0].dp;
}
static inline void simcall_rdv_comm_count_by_host__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_host_t simcall_rdv_comm_count_by_host__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_rdv_comm_count_by_host__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline unsigned int simcall_rdv_comm_count_by_host__get__result(smx_simcall_t simcall){
    return  simcall->result.ui;
}
static inline void simcall_rdv_comm_count_by_host__set__result(smx_simcall_t simcall, unsigned int result){
    simcall->result.ui = result;
}

static inline smx_rdv_t simcall_rdv_get_head__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[0].dp;
}
static inline void simcall_rdv_get_head__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_synchro_t simcall_rdv_get_head__get__result(smx_simcall_t simcall){
    return (smx_synchro_t) simcall->result.dp;
}
static inline void simcall_rdv_get_head__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_rdv_t simcall_rdv_set_receiver__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[0].dp;
}
static inline void simcall_rdv_set_receiver__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_process_t simcall_rdv_set_receiver__get__receiver(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[1].dp;
}
static inline void simcall_rdv_set_receiver__set__receiver(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}

static inline smx_rdv_t simcall_rdv_get_receiver__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[0].dp;
}
static inline void simcall_rdv_get_receiver__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_process_t simcall_rdv_get_receiver__get__result(smx_simcall_t simcall){
    return (smx_process_t) simcall->result.dp;
}
static inline void simcall_rdv_get_receiver__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_rdv_t simcall_comm_iprobe__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[0].dp;
}
static inline void simcall_comm_iprobe__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_comm_iprobe__get__type(smx_simcall_t simcall) {
  return  simcall->args[1].i;
}
static inline void simcall_comm_iprobe__set__type(smx_simcall_t simcall, int arg) {
    simcall->args[1].i = arg;
}
static inline int simcall_comm_iprobe__get__src(smx_simcall_t simcall) {
  return  simcall->args[2].i;
}
static inline void simcall_comm_iprobe__set__src(smx_simcall_t simcall, int arg) {
    simcall->args[2].i = arg;
}
static inline int simcall_comm_iprobe__get__tag(smx_simcall_t simcall) {
  return  simcall->args[3].i;
}
static inline void simcall_comm_iprobe__set__tag(smx_simcall_t simcall, int arg) {
    simcall->args[3].i = arg;
}
static inline simix_match_func_t simcall_comm_iprobe__get__match_fun(smx_simcall_t simcall) {
  return (simix_match_func_t) simcall->args[4].fp;
}
static inline void simcall_comm_iprobe__set__match_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[4].fp = arg;
}
static inline void* simcall_comm_iprobe__get__data(smx_simcall_t simcall) {
  return  simcall->args[5].dp;
}
static inline void simcall_comm_iprobe__set__data(smx_simcall_t simcall, void* arg) {
    simcall->args[5].dp = arg;
}
static inline smx_synchro_t simcall_comm_iprobe__get__result(smx_simcall_t simcall){
    return (smx_synchro_t) simcall->result.dp;
}
static inline void simcall_comm_iprobe__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_process_t simcall_comm_send__get__src(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_comm_send__set__src(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_rdv_t simcall_comm_send__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[1].dp;
}
static inline void simcall_comm_send__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline double simcall_comm_send__get__task_size(smx_simcall_t simcall) {
  return  simcall->args[2].d;
}
static inline void simcall_comm_send__set__task_size(smx_simcall_t simcall, double arg) {
    simcall->args[2].d = arg;
}
static inline double simcall_comm_send__get__rate(smx_simcall_t simcall) {
  return  simcall->args[3].d;
}
static inline void simcall_comm_send__set__rate(smx_simcall_t simcall, double arg) {
    simcall->args[3].d = arg;
}
static inline void* simcall_comm_send__get__src_buff(smx_simcall_t simcall) {
  return  simcall->args[4].dp;
}
static inline void simcall_comm_send__set__src_buff(smx_simcall_t simcall, void* arg) {
    simcall->args[4].dp = arg;
}
static inline size_t simcall_comm_send__get__src_buff_size(smx_simcall_t simcall) {
  return  simcall->args[5].sz;
}
static inline void simcall_comm_send__set__src_buff_size(smx_simcall_t simcall, size_t arg) {
    simcall->args[5].sz = arg;
}
static inline simix_match_func_t simcall_comm_send__get__match_fun(smx_simcall_t simcall) {
  return (simix_match_func_t) simcall->args[6].fp;
}
static inline void simcall_comm_send__set__match_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[6].fp = arg;
}
static inline simix_copy_data_func_t simcall_comm_send__get__copy_data_fun(smx_simcall_t simcall) {
  return (simix_copy_data_func_t) simcall->args[7].fp;
}
static inline void simcall_comm_send__set__copy_data_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[7].fp = arg;
}
static inline void* simcall_comm_send__get__data(smx_simcall_t simcall) {
  return  simcall->args[8].dp;
}
static inline void simcall_comm_send__set__data(smx_simcall_t simcall, void* arg) {
    simcall->args[8].dp = arg;
}
static inline double simcall_comm_send__get__timeout(smx_simcall_t simcall) {
  return  simcall->args[9].d;
}
static inline void simcall_comm_send__set__timeout(smx_simcall_t simcall, double arg) {
    simcall->args[9].d = arg;
}

static inline smx_process_t simcall_comm_isend__get__src(smx_simcall_t simcall) {
  return (smx_process_t) simcall->args[0].dp;
}
static inline void simcall_comm_isend__set__src(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_rdv_t simcall_comm_isend__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[1].dp;
}
static inline void simcall_comm_isend__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline double simcall_comm_isend__get__task_size(smx_simcall_t simcall) {
  return  simcall->args[2].d;
}
static inline void simcall_comm_isend__set__task_size(smx_simcall_t simcall, double arg) {
    simcall->args[2].d = arg;
}
static inline double simcall_comm_isend__get__rate(smx_simcall_t simcall) {
  return  simcall->args[3].d;
}
static inline void simcall_comm_isend__set__rate(smx_simcall_t simcall, double arg) {
    simcall->args[3].d = arg;
}
static inline void* simcall_comm_isend__get__src_buff(smx_simcall_t simcall) {
  return  simcall->args[4].dp;
}
static inline void simcall_comm_isend__set__src_buff(smx_simcall_t simcall, void* arg) {
    simcall->args[4].dp = arg;
}
static inline size_t simcall_comm_isend__get__src_buff_size(smx_simcall_t simcall) {
  return  simcall->args[5].sz;
}
static inline void simcall_comm_isend__set__src_buff_size(smx_simcall_t simcall, size_t arg) {
    simcall->args[5].sz = arg;
}
static inline simix_match_func_t simcall_comm_isend__get__match_fun(smx_simcall_t simcall) {
  return (simix_match_func_t) simcall->args[6].fp;
}
static inline void simcall_comm_isend__set__match_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[6].fp = arg;
}
static inline simix_clean_func_t simcall_comm_isend__get__clean_fun(smx_simcall_t simcall) {
  return (simix_clean_func_t) simcall->args[7].fp;
}
static inline void simcall_comm_isend__set__clean_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[7].fp = arg;
}
static inline simix_copy_data_func_t simcall_comm_isend__get__copy_data_fun(smx_simcall_t simcall) {
  return (simix_copy_data_func_t) simcall->args[8].fp;
}
static inline void simcall_comm_isend__set__copy_data_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[8].fp = arg;
}
static inline void* simcall_comm_isend__get__data(smx_simcall_t simcall) {
  return  simcall->args[9].dp;
}
static inline void simcall_comm_isend__set__data(smx_simcall_t simcall, void* arg) {
    simcall->args[9].dp = arg;
}
static inline int simcall_comm_isend__get__detached(smx_simcall_t simcall) {
  return  simcall->args[10].i;
}
static inline void simcall_comm_isend__set__detached(smx_simcall_t simcall, int arg) {
    simcall->args[10].i = arg;
}
static inline smx_synchro_t simcall_comm_isend__get__result(smx_simcall_t simcall){
    return (smx_synchro_t) simcall->result.dp;
}
static inline void simcall_comm_isend__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_rdv_t simcall_comm_recv__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[0].dp;
}
static inline void simcall_comm_recv__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline void* simcall_comm_recv__get__dst_buff(smx_simcall_t simcall) {
  return  simcall->args[1].dp;
}
static inline void simcall_comm_recv__set__dst_buff(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline size_t* simcall_comm_recv__get__dst_buff_size(smx_simcall_t simcall) {
  return (size_t*) simcall->args[2].dp;
}
static inline void simcall_comm_recv__set__dst_buff_size(smx_simcall_t simcall, void* arg) {
    simcall->args[2].dp = arg;
}
static inline simix_match_func_t simcall_comm_recv__get__match_fun(smx_simcall_t simcall) {
  return (simix_match_func_t) simcall->args[3].fp;
}
static inline void simcall_comm_recv__set__match_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[3].fp = arg;
}
static inline simix_copy_data_func_t simcall_comm_recv__get__copy_data_fun(smx_simcall_t simcall) {
  return (simix_copy_data_func_t) simcall->args[4].fp;
}
static inline void simcall_comm_recv__set__copy_data_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[4].fp = arg;
}
static inline void* simcall_comm_recv__get__data(smx_simcall_t simcall) {
  return  simcall->args[5].dp;
}
static inline void simcall_comm_recv__set__data(smx_simcall_t simcall, void* arg) {
    simcall->args[5].dp = arg;
}
static inline double simcall_comm_recv__get__timeout(smx_simcall_t simcall) {
  return  simcall->args[6].d;
}
static inline void simcall_comm_recv__set__timeout(smx_simcall_t simcall, double arg) {
    simcall->args[6].d = arg;
}
static inline double simcall_comm_recv__get__rate(smx_simcall_t simcall) {
  return  simcall->args[7].d;
}
static inline void simcall_comm_recv__set__rate(smx_simcall_t simcall, double arg) {
    simcall->args[7].d = arg;
}

static inline smx_rdv_t simcall_comm_irecv__get__rdv(smx_simcall_t simcall) {
  return (smx_rdv_t) simcall->args[0].dp;
}
static inline void simcall_comm_irecv__set__rdv(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline void* simcall_comm_irecv__get__dst_buff(smx_simcall_t simcall) {
  return  simcall->args[1].dp;
}
static inline void simcall_comm_irecv__set__dst_buff(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline size_t* simcall_comm_irecv__get__dst_buff_size(smx_simcall_t simcall) {
  return (size_t*) simcall->args[2].dp;
}
static inline void simcall_comm_irecv__set__dst_buff_size(smx_simcall_t simcall, void* arg) {
    simcall->args[2].dp = arg;
}
static inline simix_match_func_t simcall_comm_irecv__get__match_fun(smx_simcall_t simcall) {
  return (simix_match_func_t) simcall->args[3].fp;
}
static inline void simcall_comm_irecv__set__match_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[3].fp = arg;
}
static inline simix_copy_data_func_t simcall_comm_irecv__get__copy_data_fun(smx_simcall_t simcall) {
  return (simix_copy_data_func_t) simcall->args[4].fp;
}
static inline void simcall_comm_irecv__set__copy_data_fun(smx_simcall_t simcall, FPtr arg) {
    simcall->args[4].fp = arg;
}
static inline void* simcall_comm_irecv__get__data(smx_simcall_t simcall) {
  return  simcall->args[5].dp;
}
static inline void simcall_comm_irecv__set__data(smx_simcall_t simcall, void* arg) {
    simcall->args[5].dp = arg;
}
static inline double simcall_comm_irecv__get__rate(smx_simcall_t simcall) {
  return  simcall->args[6].d;
}
static inline void simcall_comm_irecv__set__rate(smx_simcall_t simcall, double arg) {
    simcall->args[6].d = arg;
}
static inline smx_synchro_t simcall_comm_irecv__get__result(smx_simcall_t simcall){
    return (smx_synchro_t) simcall->result.dp;
}
static inline void simcall_comm_irecv__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_synchro_t simcall_comm_cancel__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_cancel__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline xbt_dynar_t simcall_comm_waitany__get__comms(smx_simcall_t simcall) {
  return (xbt_dynar_t) simcall->args[0].dp;
}
static inline void simcall_comm_waitany__set__comms(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_comm_waitany__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_comm_waitany__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_synchro_t simcall_comm_wait__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_wait__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_comm_wait__get__timeout(smx_simcall_t simcall) {
  return  simcall->args[1].d;
}
static inline void simcall_comm_wait__set__timeout(smx_simcall_t simcall, double arg) {
    simcall->args[1].d = arg;
}

static inline smx_synchro_t simcall_comm_test__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_test__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_comm_test__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_comm_test__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline xbt_dynar_t simcall_comm_testany__get__comms(smx_simcall_t simcall) {
  return (xbt_dynar_t) simcall->args[0].dp;
}
static inline void simcall_comm_testany__set__comms(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_comm_testany__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_comm_testany__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_synchro_t simcall_comm_get_remains__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_get_remains__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_comm_get_remains__get__result(smx_simcall_t simcall){
    return  simcall->result.d;
}
static inline void simcall_comm_get_remains__set__result(smx_simcall_t simcall, double result){
    simcall->result.d = result;
}

static inline smx_synchro_t simcall_comm_get_state__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_get_state__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline e_smx_state_t simcall_comm_get_state__get__result(smx_simcall_t simcall){
    return (e_smx_state_t) simcall->result.i;
}
static inline void simcall_comm_get_state__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_synchro_t simcall_comm_get_src_data__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_get_src_data__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline void* simcall_comm_get_src_data__get__result(smx_simcall_t simcall){
    return  simcall->result.dp;
}
static inline void simcall_comm_get_src_data__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_synchro_t simcall_comm_get_dst_data__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_get_dst_data__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline void* simcall_comm_get_dst_data__get__result(smx_simcall_t simcall){
    return  simcall->result.dp;
}
static inline void simcall_comm_get_dst_data__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_synchro_t simcall_comm_get_src_proc__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_get_src_proc__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_process_t simcall_comm_get_src_proc__get__result(smx_simcall_t simcall){
    return (smx_process_t) simcall->result.dp;
}
static inline void simcall_comm_get_src_proc__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_synchro_t simcall_comm_get_dst_proc__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_get_dst_proc__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_process_t simcall_comm_get_dst_proc__get__result(smx_simcall_t simcall){
    return (smx_process_t) simcall->result.dp;
}
static inline void simcall_comm_get_dst_proc__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_mutex_t simcall_mutex_init__get__result(smx_simcall_t simcall){
    return (smx_mutex_t) simcall->result.dp;
}
static inline void simcall_mutex_init__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_mutex_t simcall_mutex_destroy__get__mutex(smx_simcall_t simcall) {
  return (smx_mutex_t) simcall->args[0].dp;
}
static inline void simcall_mutex_destroy__set__mutex(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_mutex_t simcall_mutex_lock__get__mutex(smx_simcall_t simcall) {
  return (smx_mutex_t) simcall->args[0].dp;
}
static inline void simcall_mutex_lock__set__mutex(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_mutex_t simcall_mutex_trylock__get__mutex(smx_simcall_t simcall) {
  return (smx_mutex_t) simcall->args[0].dp;
}
static inline void simcall_mutex_trylock__set__mutex(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_mutex_trylock__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_mutex_trylock__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_mutex_t simcall_mutex_unlock__get__mutex(smx_simcall_t simcall) {
  return (smx_mutex_t) simcall->args[0].dp;
}
static inline void simcall_mutex_unlock__set__mutex(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_cond_t simcall_cond_init__get__result(smx_simcall_t simcall){
    return (smx_cond_t) simcall->result.dp;
}
static inline void simcall_cond_init__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_cond_t simcall_cond_destroy__get__cond(smx_simcall_t simcall) {
  return (smx_cond_t) simcall->args[0].dp;
}
static inline void simcall_cond_destroy__set__cond(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_cond_t simcall_cond_signal__get__cond(smx_simcall_t simcall) {
  return (smx_cond_t) simcall->args[0].dp;
}
static inline void simcall_cond_signal__set__cond(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_cond_t simcall_cond_wait__get__cond(smx_simcall_t simcall) {
  return (smx_cond_t) simcall->args[0].dp;
}
static inline void simcall_cond_wait__set__cond(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_mutex_t simcall_cond_wait__get__mutex(smx_simcall_t simcall) {
  return (smx_mutex_t) simcall->args[1].dp;
}
static inline void simcall_cond_wait__set__mutex(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}

static inline smx_cond_t simcall_cond_wait_timeout__get__cond(smx_simcall_t simcall) {
  return (smx_cond_t) simcall->args[0].dp;
}
static inline void simcall_cond_wait_timeout__set__cond(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_mutex_t simcall_cond_wait_timeout__get__mutex(smx_simcall_t simcall) {
  return (smx_mutex_t) simcall->args[1].dp;
}
static inline void simcall_cond_wait_timeout__set__mutex(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline double simcall_cond_wait_timeout__get__timeout(smx_simcall_t simcall) {
  return  simcall->args[2].d;
}
static inline void simcall_cond_wait_timeout__set__timeout(smx_simcall_t simcall, double arg) {
    simcall->args[2].d = arg;
}

static inline smx_cond_t simcall_cond_broadcast__get__cond(smx_simcall_t simcall) {
  return (smx_cond_t) simcall->args[0].dp;
}
static inline void simcall_cond_broadcast__set__cond(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline unsigned int simcall_sem_init__get__capacity(smx_simcall_t simcall) {
  return  simcall->args[0].ui;
}
static inline void simcall_sem_init__set__capacity(smx_simcall_t simcall, unsigned int arg) {
    simcall->args[0].ui = arg;
}
static inline smx_sem_t simcall_sem_init__get__result(smx_simcall_t simcall){
    return (smx_sem_t) simcall->result.dp;
}
static inline void simcall_sem_init__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_sem_t simcall_sem_destroy__get__sem(smx_simcall_t simcall) {
  return (smx_sem_t) simcall->args[0].dp;
}
static inline void simcall_sem_destroy__set__sem(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_sem_t simcall_sem_release__get__sem(smx_simcall_t simcall) {
  return (smx_sem_t) simcall->args[0].dp;
}
static inline void simcall_sem_release__set__sem(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_sem_t simcall_sem_would_block__get__sem(smx_simcall_t simcall) {
  return (smx_sem_t) simcall->args[0].dp;
}
static inline void simcall_sem_would_block__set__sem(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_sem_would_block__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_sem_would_block__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_sem_t simcall_sem_acquire__get__sem(smx_simcall_t simcall) {
  return (smx_sem_t) simcall->args[0].dp;
}
static inline void simcall_sem_acquire__set__sem(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}

static inline smx_sem_t simcall_sem_acquire_timeout__get__sem(smx_simcall_t simcall) {
  return (smx_sem_t) simcall->args[0].dp;
}
static inline void simcall_sem_acquire_timeout__set__sem(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline double simcall_sem_acquire_timeout__get__timeout(smx_simcall_t simcall) {
  return  simcall->args[1].d;
}
static inline void simcall_sem_acquire_timeout__set__timeout(smx_simcall_t simcall, double arg) {
    simcall->args[1].d = arg;
}

static inline smx_sem_t simcall_sem_get_capacity__get__sem(smx_simcall_t simcall) {
  return (smx_sem_t) simcall->args[0].dp;
}
static inline void simcall_sem_get_capacity__set__sem(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_sem_get_capacity__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_sem_get_capacity__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_file_t simcall_file_read__get__fd(smx_simcall_t simcall) {
  return (smx_file_t) simcall->args[0].dp;
}
static inline void simcall_file_read__set__fd(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline sg_size_t simcall_file_read__get__size(smx_simcall_t simcall) {
  return  simcall->args[1].sgsz;
}
static inline void simcall_file_read__set__size(smx_simcall_t simcall, sg_size_t arg) {
    simcall->args[1].sgsz = arg;
}
static inline smx_host_t simcall_file_read__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[2].dp;
}
static inline void simcall_file_read__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[2].dp = arg;
}
static inline sg_size_t simcall_file_read__get__result(smx_simcall_t simcall){
    return  simcall->result.sgsz;
}
static inline void simcall_file_read__set__result(smx_simcall_t simcall, sg_size_t result){
    simcall->result.sgsz = result;
}

static inline smx_file_t simcall_file_write__get__fd(smx_simcall_t simcall) {
  return (smx_file_t) simcall->args[0].dp;
}
static inline void simcall_file_write__set__fd(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline sg_size_t simcall_file_write__get__size(smx_simcall_t simcall) {
  return  simcall->args[1].sgsz;
}
static inline void simcall_file_write__set__size(smx_simcall_t simcall, sg_size_t arg) {
    simcall->args[1].sgsz = arg;
}
static inline smx_host_t simcall_file_write__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[2].dp;
}
static inline void simcall_file_write__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[2].dp = arg;
}
static inline sg_size_t simcall_file_write__get__result(smx_simcall_t simcall){
    return  simcall->result.sgsz;
}
static inline void simcall_file_write__set__result(smx_simcall_t simcall, sg_size_t result){
    simcall->result.sgsz = result;
}

static inline const char* simcall_file_open__get__fullpath(smx_simcall_t simcall) {
  return  simcall->args[0].cc;
}
static inline void simcall_file_open__set__fullpath(smx_simcall_t simcall, const char* arg) {
    simcall->args[0].cc = arg;
}
static inline smx_host_t simcall_file_open__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_file_open__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline smx_file_t simcall_file_open__get__result(smx_simcall_t simcall){
    return (smx_file_t) simcall->result.dp;
}
static inline void simcall_file_open__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_file_t simcall_file_close__get__fd(smx_simcall_t simcall) {
  return (smx_file_t) simcall->args[0].dp;
}
static inline void simcall_file_close__set__fd(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_host_t simcall_file_close__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_file_close__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline int simcall_file_close__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_file_close__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_file_t simcall_file_unlink__get__fd(smx_simcall_t simcall) {
  return (smx_file_t) simcall->args[0].dp;
}
static inline void simcall_file_unlink__set__fd(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline smx_host_t simcall_file_unlink__get__host(smx_simcall_t simcall) {
  return (smx_host_t) simcall->args[1].dp;
}
static inline void simcall_file_unlink__set__host(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline int simcall_file_unlink__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_file_unlink__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_file_t simcall_file_get_size__get__fd(smx_simcall_t simcall) {
  return (smx_file_t) simcall->args[0].dp;
}
static inline void simcall_file_get_size__set__fd(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline sg_size_t simcall_file_get_size__get__result(smx_simcall_t simcall){
    return  simcall->result.sgsz;
}
static inline void simcall_file_get_size__set__result(smx_simcall_t simcall, sg_size_t result){
    simcall->result.sgsz = result;
}

static inline smx_file_t simcall_file_tell__get__fd(smx_simcall_t simcall) {
  return (smx_file_t) simcall->args[0].dp;
}
static inline void simcall_file_tell__set__fd(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline sg_size_t simcall_file_tell__get__result(smx_simcall_t simcall){
    return  simcall->result.sgsz;
}
static inline void simcall_file_tell__set__result(smx_simcall_t simcall, sg_size_t result){
    simcall->result.sgsz = result;
}

static inline smx_file_t simcall_file_seek__get__fd(smx_simcall_t simcall) {
  return (smx_file_t) simcall->args[0].dp;
}
static inline void simcall_file_seek__set__fd(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline sg_offset_t simcall_file_seek__get__offset(smx_simcall_t simcall) {
  return  simcall->args[1].sgoff;
}
static inline void simcall_file_seek__set__offset(smx_simcall_t simcall, sg_offset_t arg) {
    simcall->args[1].sgoff = arg;
}
static inline int simcall_file_seek__get__origin(smx_simcall_t simcall) {
  return  simcall->args[2].i;
}
static inline void simcall_file_seek__set__origin(smx_simcall_t simcall, int arg) {
    simcall->args[2].i = arg;
}
static inline int simcall_file_seek__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_file_seek__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_file_t simcall_file_get_info__get__fd(smx_simcall_t simcall) {
  return (smx_file_t) simcall->args[0].dp;
}
static inline void simcall_file_get_info__set__fd(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline xbt_dynar_t simcall_file_get_info__get__result(smx_simcall_t simcall){
    return (xbt_dynar_t) simcall->result.dp;
}
static inline void simcall_file_get_info__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_file_t simcall_file_move__get__fd(smx_simcall_t simcall) {
  return (smx_file_t) simcall->args[0].dp;
}
static inline void simcall_file_move__set__fd(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline const char* simcall_file_move__get__fullpath(smx_simcall_t simcall) {
  return  simcall->args[1].cc;
}
static inline void simcall_file_move__set__fullpath(smx_simcall_t simcall, const char* arg) {
    simcall->args[1].cc = arg;
}
static inline int simcall_file_move__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_file_move__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline smx_storage_t simcall_storage_get_free_size__get__storage(smx_simcall_t simcall) {
  return (smx_storage_t) simcall->args[0].dp;
}
static inline void simcall_storage_get_free_size__set__storage(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline sg_size_t simcall_storage_get_free_size__get__result(smx_simcall_t simcall){
    return  simcall->result.sgsz;
}
static inline void simcall_storage_get_free_size__set__result(smx_simcall_t simcall, sg_size_t result){
    simcall->result.sgsz = result;
}

static inline smx_storage_t simcall_storage_get_used_size__get__name(smx_simcall_t simcall) {
  return (smx_storage_t) simcall->args[0].dp;
}
static inline void simcall_storage_get_used_size__set__name(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline sg_size_t simcall_storage_get_used_size__get__result(smx_simcall_t simcall){
    return  simcall->result.sgsz;
}
static inline void simcall_storage_get_used_size__set__result(smx_simcall_t simcall, sg_size_t result){
    simcall->result.sgsz = result;
}

static inline smx_storage_t simcall_storage_get_properties__get__storage(smx_simcall_t simcall) {
  return (smx_storage_t) simcall->args[0].dp;
}
static inline void simcall_storage_get_properties__set__storage(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline xbt_dict_t simcall_storage_get_properties__get__result(smx_simcall_t simcall){
    return (xbt_dict_t) simcall->result.dp;
}
static inline void simcall_storage_get_properties__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline smx_storage_t simcall_storage_get_content__get__storage(smx_simcall_t simcall) {
  return (smx_storage_t) simcall->args[0].dp;
}
static inline void simcall_storage_get_content__set__storage(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline xbt_dict_t simcall_storage_get_content__get__result(smx_simcall_t simcall){
    return (xbt_dict_t) simcall->result.dp;
}
static inline void simcall_storage_get_content__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline const char* simcall_asr_get_properties__get__name(smx_simcall_t simcall) {
  return  simcall->args[0].cc;
}
static inline void simcall_asr_get_properties__set__name(smx_simcall_t simcall, const char* arg) {
    simcall->args[0].cc = arg;
}
static inline xbt_dict_t simcall_asr_get_properties__get__result(smx_simcall_t simcall){
    return (xbt_dict_t) simcall->result.dp;
}
static inline void simcall_asr_get_properties__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}
#ifdef HAVE_LATENCY_BOUND_TRACKING

static inline smx_synchro_t simcall_comm_is_latency_bounded__get__comm(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_comm_is_latency_bounded__set__comm(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline int simcall_comm_is_latency_bounded__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_comm_is_latency_bounded__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}
#endif

#ifdef HAVE_TRACING

static inline smx_synchro_t simcall_set_category__get__synchro(smx_simcall_t simcall) {
  return (smx_synchro_t) simcall->args[0].dp;
}
static inline void simcall_set_category__set__synchro(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline const char* simcall_set_category__get__category(smx_simcall_t simcall) {
  return  simcall->args[1].cc;
}
static inline void simcall_set_category__set__category(smx_simcall_t simcall, const char* arg) {
    simcall->args[1].cc = arg;
}
#endif

#ifdef HAVE_MC

static inline mc_snapshot_t simcall_mc_snapshot__get__result(smx_simcall_t simcall){
    return (mc_snapshot_t) simcall->result.dp;
}
static inline void simcall_mc_snapshot__set__result(smx_simcall_t simcall, void* result){
    simcall->result.dp = result;
}

static inline mc_snapshot_t simcall_mc_compare_snapshots__get__s1(smx_simcall_t simcall) {
  return (mc_snapshot_t) simcall->args[0].dp;
}
static inline void simcall_mc_compare_snapshots__set__s1(smx_simcall_t simcall, void* arg) {
    simcall->args[0].dp = arg;
}
static inline mc_snapshot_t simcall_mc_compare_snapshots__get__s2(smx_simcall_t simcall) {
  return (mc_snapshot_t) simcall->args[1].dp;
}
static inline void simcall_mc_compare_snapshots__set__s2(smx_simcall_t simcall, void* arg) {
    simcall->args[1].dp = arg;
}
static inline int simcall_mc_compare_snapshots__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_mc_compare_snapshots__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}

static inline int simcall_mc_random__get__min(smx_simcall_t simcall) {
  return  simcall->args[0].i;
}
static inline void simcall_mc_random__set__min(smx_simcall_t simcall, int arg) {
    simcall->args[0].i = arg;
}
static inline int simcall_mc_random__get__max(smx_simcall_t simcall) {
  return  simcall->args[1].i;
}
static inline void simcall_mc_random__set__max(smx_simcall_t simcall, int arg) {
    simcall->args[1].i = arg;
}
static inline int simcall_mc_random__get__result(smx_simcall_t simcall){
    return  simcall->result.i;
}
static inline void simcall_mc_random__set__result(smx_simcall_t simcall, int result){
    simcall->result.i = result;
}
#endif


/* The prototype of all simcall handlers, automatically generated for you */

void simcall_HANDLER_host_off(smx_simcall_t simcall, smx_host_t host);
void simcall_HANDLER_host_execution_wait(smx_simcall_t simcall, smx_synchro_t execution);
void simcall_HANDLER_vm_suspend(smx_simcall_t simcall, smx_host_t ind_vm);
void simcall_HANDLER_vm_resume(smx_simcall_t simcall, smx_host_t ind_vm);
void simcall_HANDLER_vm_shutdown(smx_simcall_t simcall, smx_host_t ind_vm);
void simcall_HANDLER_vm_save(smx_simcall_t simcall, smx_host_t ind_vm);
void simcall_HANDLER_vm_restore(smx_simcall_t simcall, smx_host_t ind_vm);
void simcall_HANDLER_process_create(smx_simcall_t simcall, smx_process_t* process, const char* name, xbt_main_func_t code, void* data, const char* hostname, double kill_time, int argc, char** argv, xbt_dict_t properties, int auto_restart);
void simcall_HANDLER_process_kill(smx_simcall_t simcall, smx_process_t process);
void simcall_HANDLER_process_killall(smx_simcall_t simcall, int reset_pid);
void simcall_HANDLER_process_change_host(smx_simcall_t simcall, smx_process_t process, smx_host_t dest);
void simcall_HANDLER_process_suspend(smx_simcall_t simcall, smx_process_t process);
void simcall_HANDLER_process_resume(smx_simcall_t simcall, smx_process_t process);
void simcall_HANDLER_process_join(smx_simcall_t simcall, smx_process_t process, double timeout);
void simcall_HANDLER_process_sleep(smx_simcall_t simcall, double duration);
smx_process_t simcall_HANDLER_process_restart(smx_simcall_t simcall, smx_process_t process);
smx_synchro_t simcall_HANDLER_comm_iprobe(smx_simcall_t simcall, smx_rdv_t rdv, int type, int src, int tag, simix_match_func_t match_fun, void* data);
void simcall_HANDLER_comm_send(smx_simcall_t simcall, smx_process_t src, smx_rdv_t rdv, double task_size, double rate, void* src_buff, size_t src_buff_size, simix_match_func_t match_fun, simix_copy_data_func_t copy_data_fun, void* data, double timeout);
smx_synchro_t simcall_HANDLER_comm_isend(smx_simcall_t simcall, smx_process_t src, smx_rdv_t rdv, double task_size, double rate, void* src_buff, size_t src_buff_size, simix_match_func_t match_fun, simix_clean_func_t clean_fun, simix_copy_data_func_t copy_data_fun, void* data, int detached);
void simcall_HANDLER_comm_recv(smx_simcall_t simcall, smx_rdv_t rdv, void* dst_buff, size_t* dst_buff_size, simix_match_func_t match_fun, simix_copy_data_func_t copy_data_fun, void* data, double timeout, double rate);
smx_synchro_t simcall_HANDLER_comm_irecv(smx_simcall_t simcall, smx_rdv_t rdv, void* dst_buff, size_t* dst_buff_size, simix_match_func_t match_fun, simix_copy_data_func_t copy_data_fun, void* data, double rate);
void simcall_HANDLER_comm_waitany(smx_simcall_t simcall, xbt_dynar_t comms);
void simcall_HANDLER_comm_wait(smx_simcall_t simcall, smx_synchro_t comm, double timeout);
void simcall_HANDLER_comm_test(smx_simcall_t simcall, smx_synchro_t comm);
void simcall_HANDLER_comm_testany(smx_simcall_t simcall, xbt_dynar_t comms);
smx_mutex_t simcall_HANDLER_mutex_init(smx_simcall_t simcall);
void simcall_HANDLER_mutex_lock(smx_simcall_t simcall, smx_mutex_t mutex);
int simcall_HANDLER_mutex_trylock(smx_simcall_t simcall, smx_mutex_t mutex);
void simcall_HANDLER_mutex_unlock(smx_simcall_t simcall, smx_mutex_t mutex);
void simcall_HANDLER_cond_wait(smx_simcall_t simcall, smx_cond_t cond, smx_mutex_t mutex);
void simcall_HANDLER_cond_wait_timeout(smx_simcall_t simcall, smx_cond_t cond, smx_mutex_t mutex, double timeout);
void simcall_HANDLER_sem_release(smx_simcall_t simcall, smx_sem_t sem);
int simcall_HANDLER_sem_would_block(smx_simcall_t simcall, smx_sem_t sem);
void simcall_HANDLER_sem_acquire(smx_simcall_t simcall, smx_sem_t sem);
void simcall_HANDLER_sem_acquire_timeout(smx_simcall_t simcall, smx_sem_t sem, double timeout);
int simcall_HANDLER_sem_get_capacity(smx_simcall_t simcall, smx_sem_t sem);
void simcall_HANDLER_file_read(smx_simcall_t simcall, smx_file_t fd, sg_size_t size, smx_host_t host);
void simcall_HANDLER_file_write(smx_simcall_t simcall, smx_file_t fd, sg_size_t size, smx_host_t host);
void simcall_HANDLER_file_open(smx_simcall_t simcall, const char* fullpath, smx_host_t host);
void simcall_HANDLER_file_close(smx_simcall_t simcall, smx_file_t fd, smx_host_t host);
sg_size_t simcall_HANDLER_file_get_size(smx_simcall_t simcall, smx_file_t fd);
sg_size_t simcall_HANDLER_file_tell(smx_simcall_t simcall, smx_file_t fd);
int simcall_HANDLER_file_seek(smx_simcall_t simcall, smx_file_t fd, sg_offset_t offset, int origin);
xbt_dynar_t simcall_HANDLER_file_get_info(smx_simcall_t simcall, smx_file_t fd);
int simcall_HANDLER_file_move(smx_simcall_t simcall, smx_file_t fd, const char* fullpath);
sg_size_t simcall_HANDLER_storage_get_free_size(smx_simcall_t simcall, smx_storage_t storage);
sg_size_t simcall_HANDLER_storage_get_used_size(smx_simcall_t simcall, smx_storage_t name);
xbt_dict_t simcall_HANDLER_asr_get_properties(smx_simcall_t simcall, const char* name);
#ifdef HAVE_LATENCY_BOUND_TRACKING

#endif

#ifdef HAVE_TRACING

#endif

#ifdef HAVE_MC
mc_snapshot_t simcall_HANDLER_mc_snapshot(smx_simcall_t simcall);
int simcall_HANDLER_mc_compare_snapshots(smx_simcall_t simcall, mc_snapshot_t s1, mc_snapshot_t s2);
int simcall_HANDLER_mc_random(smx_simcall_t simcall, int min, int max);
#endif
