# Copyright (c) 2014. The SimGrid Team. All rights reserved.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the license (GNU LGPL) which comes with this package.

# CallType handler? name (resulttype,resultcast) (arg0name,arg0type,arg0cast) (arg1name,arg1type,arg1cast)

# CallType must be one of the three:
#  - Func: returning a value immediately
#  - Blck: Blocking call that does not return in the same scheduling round
#  - Proc: not returning any value (but doing so immediately) 

# Handler? is either "H" if we need to generate a handler or "-" if we should go without handlers

Func - host_get_by_name (void*, smx_host_t) (name, const char*)
Func - host_get_name (const char*) (host, void*, smx_host_t)
Proc - host_on (void) (host, void*, smx_host_t)
Proc H host_off (void) (host, void*, smx_host_t)
Func - host_get_properties (void*, xbt_dict_t) (host, void*, smx_host_t)
Func - host_get_core (int) (host, void*, smx_host_t)
Func - host_get_process_list (void*, xbt_swag_t) (host, void*, smx_host_t)
Func - host_get_speed (double) (host, void*, smx_host_t)
Func - host_get_available_speed (double) (host, void*, smx_host_t)
Func - host_get_state (int) (host, void*, smx_host_t)
Func - host_get_current_power_peak (double) (host, void*, smx_host_t)
Func - host_get_power_peak_at (double) (host, void*, smx_host_t) (pstate_index, int)
Func - host_get_nb_pstates (int) (host, void*, smx_host_t)
Proc - host_set_power_peak_at (void) (host, void*, smx_host_t) (pstate_index, int)
Func - host_get_consumed_energy (double) (host, void*, smx_host_t)

Func - host_execute (void*, smx_synchro_t) (name, const char*) (host, void*, smx_host_t) (computation_amount, double) (priority, double) (bound, double) (affinity_mask, unsigned long)
Func - host_parallel_execute (void*, smx_synchro_t) (name, const char*) (host_nb, int) (host_list, void*, smx_host_t*) (computation_amount, void*, double*) (communication_amount, void*, double*) (amount, double) (rate, double)
Proc - host_execution_destroy (void) (execution, void*, smx_synchro_t)
Proc - host_execution_cancel (void) (execution, void*, smx_synchro_t)
Func - host_execution_get_remains (double) (execution, void*, smx_synchro_t)
Func - host_execution_get_state (int, e_smx_state_t) (execution, void*, smx_synchro_t)
Proc - host_execution_set_priority (void) (execution, void*, smx_synchro_t) (priority, double)
Proc - host_execution_set_bound (void) (execution, void*, smx_synchro_t) (bound, double)
Proc - host_execution_set_affinity (void) (execution, void*, smx_synchro_t) (ws, void*, smx_host_t) (mask, unsigned long)
Blck H host_execution_wait (int) (execution, void*, smx_synchro_t)
Func - host_get_mounted_storage_list (void*, xbt_dict_t) (host, void*, smx_host_t)
Func - host_get_attached_storage_list (void*, xbt_dynar_t) (host, void*, smx_host_t)
Proc - host_get_params (void) (ind_vm, void*, smx_host_t) (params, void*, ws_params_t)
Proc - host_set_params (void) (ind_vm, void*, smx_host_t) (params, void*, ws_params_t)
Func - vm_create (void*, smx_host_t) (name, const char*) (ind_pm, void*, smx_host_t)
Proc - vm_start (void) (ind_vm, void*, smx_host_t)
Func - vm_get_state (int) (ind_vm, void*, smx_host_t)
Proc - vm_migrate (void) (ind_vm, void*, smx_host_t) (ind_dst_pm, void*, smx_host_t)
Func - vm_get_pm (void*) (ind_vm, void*, smx_host_t)
Proc - vm_set_bound (void) (ind_vm, void*, smx_host_t) (bound, double)
Proc - vm_set_affinity (void) (ind_vm, void*, smx_host_t) (ind_pm, void*, smx_host_t) (mask, unsigned long)
Proc - vm_destroy (void) (ind_vm, void*, smx_host_t)
Proc H vm_suspend (void) (ind_vm, void*, smx_host_t)
Proc H vm_resume (void) (ind_vm, void*, smx_host_t)
Proc H vm_shutdown (void) (ind_vm, void*, smx_host_t)
Proc H vm_save (void) (ind_vm, void*, smx_host_t)
Proc H vm_restore (void) (ind_vm, void*, smx_host_t)
Proc H process_create (void) (process, void*, smx_process_t*) (name, const char*) (code, FPtr, xbt_main_func_t) (data, void*) (hostname, const char*) (kill_time, double) (argc, int) (argv, void*, char**) (properties, void*, xbt_dict_t) (auto_restart, int)
Proc H process_kill (void) (process, void*, smx_process_t)
Proc H process_killall (void) (reset_pid, int)
Proc - process_cleanup (void) (process, void*, smx_process_t)
Proc H process_change_host (void) (process, void*, smx_process_t) (dest, void*, smx_host_t)
Blck H process_suspend (void) (process, void*, smx_process_t)
Proc H process_resume (void) (process, void*, smx_process_t)
Func - process_count (int)
Func - process_get_PID (int) (process, void*, smx_process_t)
Func - process_get_PPID (int) (process, void*, smx_process_t)
Func - process_get_data (void*) (process, void*, smx_process_t)
Proc - process_set_data (void) (process, void*, smx_process_t) (data, void*)
Func - process_get_host (void*, smx_host_t) (process, void*, smx_process_t)
Func - process_get_name (const char*) (process, void*, smx_process_t)
Func - process_is_suspended (int) (process, void*, smx_process_t)
Func - process_get_properties (void*, xbt_dict_t) (process, void*, smx_process_t)
Blck H process_join (int) (process, void*, smx_process_t) (timeout, double)
Blck H process_sleep (int) (duration, double)
Proc - process_on_exit (void) (process, void*, smx_process_t) (fun, FPtr, int_f_pvoid_pvoid_t) (data, void*)
Proc - process_auto_restart_set (void) (process, void*, smx_process_t) (auto_restart, int)
Func H process_restart (void*, smx_process_t) (process, void*, smx_process_t)

Func - rdv_create (void*, smx_rdv_t) (name, const char*)
Proc - rdv_destroy (void) (rdv, void*, smx_rdv_t)
Func - rdv_comm_count_by_host (unsigned int) (rdv, void*, smx_rdv_t) (host, void*, smx_host_t)
Func - rdv_get_head (void*, smx_synchro_t) (rdv, void*, smx_rdv_t)
Proc - rdv_set_receiver (void) (rdv, void*, smx_rdv_t) (receiver, void*, smx_process_t)
Func - rdv_get_receiver (void*, smx_process_t) (rdv, void*, smx_rdv_t)
Func H comm_iprobe (void*, smx_synchro_t) (rdv, void*, smx_rdv_t) (type, int) (src, int) (tag, int) (match_fun, FPtr, simix_match_func_t) (data, void*)
Blck H comm_send (void) (src, void*, smx_process_t) (rdv, void*, smx_rdv_t)  (task_size, double) (rate, double) (src_buff, void*) (src_buff_size, size_t) (match_fun, FPtr, simix_match_func_t) (copy_data_fun, FPtr, simix_copy_data_func_t) (data, void*) (timeout, double)
Func H comm_isend (void*, smx_synchro_t) (src, void*, smx_process_t) (rdv, void*, smx_rdv_t) (task_size, double) (rate, double) (src_buff, void*) (src_buff_size, size_t) (match_fun, FPtr, simix_match_func_t) (clean_fun, FPtr, simix_clean_func_t) (copy_data_fun, FPtr, simix_copy_data_func_t) (data, void*) (detached, int)
Blck H comm_recv (void) (rdv, void*, smx_rdv_t) (dst_buff, void*) (dst_buff_size, void*, size_t*) (match_fun, FPtr, simix_match_func_t) (copy_data_fun, FPtr, simix_copy_data_func_t) (data, void*) (timeout, double) (rate, double)
Func H comm_irecv (void*, smx_synchro_t) (rdv, void*, smx_rdv_t) (dst_buff, void*) (dst_buff_size, void*, size_t*) (match_fun, FPtr, simix_match_func_t) (copy_data_fun, FPtr, simix_copy_data_func_t) (data, void*) (rate, double)
Proc - comm_cancel (void) (comm, void*, smx_synchro_t)
Blck H comm_waitany (int) (comms, void*, xbt_dynar_t)
Blck H comm_wait (void) (comm, void*, smx_synchro_t) (timeout, double)
Blck H comm_test (int) (comm, void*, smx_synchro_t)
Blck H comm_testany (int) (comms, void*, xbt_dynar_t)
Func - comm_get_remains (double) (comm, void*, smx_synchro_t)
Func - comm_get_state (int, e_smx_state_t) (comm, void*, smx_synchro_t)
Func - comm_get_src_data (void*) (comm, void*, smx_synchro_t)
Func - comm_get_dst_data (void*) (comm, void*, smx_synchro_t)
Func - comm_get_src_proc (void*, smx_process_t) (comm, void*, smx_synchro_t)
Func - comm_get_dst_proc (void*, smx_process_t) (comm, void*, smx_synchro_t)
Func H mutex_init (void*, smx_mutex_t)
Proc - mutex_destroy (void) (mutex, void*, smx_mutex_t)
Blck H mutex_lock (void) (mutex, void*, smx_mutex_t)
Func H mutex_trylock (int) (mutex, void*, smx_mutex_t)
Proc H mutex_unlock (void) (mutex, void*, smx_mutex_t)
Func - cond_init (void*, smx_cond_t)
Proc - cond_destroy (void) (cond, void*, smx_cond_t)
Proc - cond_signal (void) (cond, void*, smx_cond_t)
Blck H cond_wait (void) (cond, void*, smx_cond_t) (mutex, void*, smx_mutex_t)
Blck H cond_wait_timeout (void) (cond, void*, smx_cond_t) (mutex, void*, smx_mutex_t) (timeout, double)
Proc - cond_broadcast (void) (cond, void*, smx_cond_t)
Func - sem_init (void*, smx_sem_t) (capacity, unsigned int)
Proc - sem_destroy (void) (sem, void*, smx_sem_t)
Proc H sem_release (void) (sem, void*, smx_sem_t)
Func H sem_would_block (int) (sem, void*, smx_sem_t)
Blck H sem_acquire (void) (sem, void*, smx_sem_t)
Blck H sem_acquire_timeout (void) (sem, void*, smx_sem_t) (timeout, double)
Func H sem_get_capacity (int) (sem, void*, smx_sem_t)
Blck H file_read (sg_size_t) (fd, void*, smx_file_t) (size, sg_size_t) (host, void*, smx_host_t)
Blck H file_write (sg_size_t) (fd, void*, smx_file_t) (size, sg_size_t) (host, void*, smx_host_t)
Blck H file_open (void*, smx_file_t) (fullpath, const char*) (host, void*, smx_host_t)
Blck H file_close (int) (fd, void*, smx_file_t) (host, void*, smx_host_t)
Func - file_unlink (int) (fd, void*, smx_file_t) (host, void*, smx_host_t)
Func H file_get_size (sg_size_t) (fd, void*, smx_file_t)
Func H file_tell (sg_size_t) (fd, void*, smx_file_t)
Func H file_seek (int) (fd, void*, smx_file_t) (offset, sg_offset_t) (origin, int)
Func H file_get_info (void*, xbt_dynar_t) (fd, void*, smx_file_t)
Func H file_move (int) (fd, void*, smx_file_t) (fullpath, const char*)
Func H storage_get_free_size (sg_size_t) (storage, void*, smx_storage_t)
Func H storage_get_used_size (sg_size_t) (name, void*, smx_storage_t)
Func - storage_get_properties (void*, xbt_dict_t) (storage, void*, smx_storage_t)
Func - storage_get_content (void*, xbt_dict_t) (storage, void*, smx_storage_t)
Func H asr_get_properties (void*, xbt_dict_t) (name, const char*)
## HAVE_LATENCY_BOUND_TRACKING
Func - comm_is_latency_bounded (int) (comm, void*, smx_synchro_t)
## HAVE_TRACING
Proc - set_category (void) (synchro, void*, smx_synchro_t) (category, const char*)
## HAVE_MC
Func H mc_snapshot (void*, mc_snapshot_t)
Func H mc_compare_snapshots (int) (s1, void*, mc_snapshot_t) (s2, void*, mc_snapshot_t)
Func H mc_random (int) (min, int) (max, int)
