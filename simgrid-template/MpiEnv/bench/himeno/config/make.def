MPIENVPREFIX=${PWD}/../../

#Global parameters
SIMGRID_PATH=${MPIENVPREFIX}/simgrid/inst/


#Fortran parameters
MPIF77 = ${SIMGRID_PATH}/bin/smpiff
FMPI_LIB  =  -lsimgrid -lgfortran #-lsmpi -lgras  
FMPI_INC = -I${SIMGRID_PATH}/include/smpi/
FFLAGS	= -O
FLINKFLAGS = -L${SIMGRID_PATH}/lib


#C++ parameters
MPICC= ${SIMGRID_PATH}/bin/smpicc
CMPI_LIB  =  -lsimgrid -lgfortran #-lsmpi -lgras  
CMPI_INC = -I${SIMGRID_PATH}/include/smpi/
CFLAGS	= -O
CLINKFLAGS = -L${SIMGRID_PATH}/lib


# This links MPI fortran programs; usually the same as ${MPIF77}
FLINK	= $(MPIF77)

# This links MPI C programs; usually the same as ${MPICC}
CLINK	= $(MPICC)


#---------------------------------------------------------------------------
# MPI dummy library:
#
# Uncomment if you want to use the MPI dummy library supplied by NAS instead 
# of the true message-passing library. The include file redefines several of
# the above macros. It also invokes make in subdirectory MPI_dummy. Make 
# sure that no spaces or tabs precede include.
#---------------------------------------------------------------------------
# include ../config/make.dummy


#---------------------------------------------------------------------------
# Utilities C:
#
# This is the C compiler used to compile C utilities.  Flags required by 
# this compiler go here also; typically there are few flags required; hence 
# there are no separate macros provided for such flags.
#---------------------------------------------------------------------------
CC	= cc -g


#---------------------------------------------------------------------------
# Destination of executables, relative to subdirs of the main directory. . 
#---------------------------------------------------------------------------
BINDIR	= ../bin


#---------------------------------------------------------------------------
# Some machines (e.g. Crays) have 128-bit DOUBLE PRECISION numbers, which
# is twice the precision required for the NPB suite. A compiler flag 
# (e.g. -dp) can usually be used to change DOUBLE PRECISION variables to
# 64 bits, but the MPI library may continue to send 128 bits. Short of
# recompiling MPI, the solution is to use MPI_REAL to send these 64-bit
# numbers, and MPI_COMPLEX to send their complex counterparts. Uncomment
# the following line to enable this substitution. 
# 
# NOTE: IF THE I/O BENCHMARK IS BEING BUILT, WE USE CONVERTFLAG TO
#       SPECIFIY THE FORTRAN RECORD LENGTH UNIT. IT IS A SYSTEM-SPECIFIC
#       VALUE (USUALLY 1 OR 4). UNCOMMENT THE SECOND LINE AND SUBSTITUTE
#       THE CORRECT VALUE FOR "length".
#       IF BOTH 128-BIT DOUBLE PRECISION NUMBERS AND I/O ARE TO BE ENABLED,
#       UNCOMMENT THE THIRD LINE AND SUBSTITUTE THE CORRECT VALUE FOR
#       "length"
#---------------------------------------------------------------------------
# CONVERTFLAG	= -DCONVERTDOUBLE
# CONVERTFLAG	= -DFORTRAN_REC_SIZE=length
# CONVERTFLAG	= -DCONVERTDOUBLE -DFORTRAN_REC_SIZE=length


#---------------------------------------------------------------------------
# The variable RAND controls which random number generator 
# is used. It is described in detail in README.install. 
# Use "randi8" unless there is a reason to use another one. 
# Other allowed values are "randi8_safe", "randdp" and "randdpvec"
#---------------------------------------------------------------------------
RAND   = randi8
# The following is highly reliable but may be slow:
# RAND   = randdp

