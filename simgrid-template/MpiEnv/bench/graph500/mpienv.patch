diff --git a/mpi/Makefile b/mpi/Makefile
index fe8e135..a0f83aa 100644
--- a/mpi/Makefile
+++ b/mpi/Makefile
@@ -1,7 +1,7 @@
 CFLAGS = -fopenmp -g -Wall -Drestrict=__restrict__ -O3 -DNDEBUG -ffast-math -DGRAPH_GENERATOR_MPI # -g -pg
 # CFLAGS = -g -Wall -Drestrict= -DGRAPH_GENERATOR_MPI
 LDFLAGS = -fopenmp -g # -g -pg
-MPICC = mpicc
+MPICC = ${PWD}/../../../MpiEnv/simgrid/inst/bin/smpicc
 
 all: graph500_mpi_simple graph500_mpi_one_sided graph500_mpi_replicated graph500_mpi_replicated_csc graph500_mpi_custom
 
diff --git a/mpi/common.h b/mpi/common.h
index 6dc3d46..19ed25e 100644
--- a/mpi/common.h
+++ b/mpi/common.h
@@ -73,27 +73,11 @@ typedef struct tuple_graph {
     MPI_Offset block_idx; \
     packed_edge* edge_data_from_file = (packed_edge*)((tg)->data_in_file ? xmalloc(FILE_CHUNKSIZE * sizeof(packed_edge)) : NULL); \
     int64_t edge_count_i = (int64_t)(-1); \
-    if ((tg)->data_in_file && block_limit > 0) { \
-      MPI_Offset start_edge_index = FILE_CHUNKSIZE * rank; \
-      if (start_edge_index > (tg)->nglobaledges) start_edge_index = (tg)->nglobaledges; \
-      edge_count_i = (tg)->nglobaledges - start_edge_index; \
-      if (edge_count_i > FILE_CHUNKSIZE) edge_count_i = FILE_CHUNKSIZE; \
-      MPI_File_read_at_all_begin((tg)->edgefile, start_edge_index, edge_data_from_file, edge_count_i, packed_edge_mpi_type); \
-    } \
     int break_from_block_loop = 0; \
     for (block_idx = 0; block_idx < block_limit; ++block_idx) { \
       MPI_Offset start_edge_index, end_edge_index; \
-      if ((tg)->data_in_file) { \
-        start_edge_index = FILE_CHUNKSIZE * (MUL_SIZE(block_idx) + rank); \
-        if (start_edge_index > (tg)->nglobaledges) start_edge_index = (tg)->nglobaledges; \
-        end_edge_index = start_edge_index + FILE_CHUNKSIZE; \
-        if (end_edge_index > (tg)->nglobaledges) end_edge_index = (tg)->nglobaledges; \
-        /* fprintf(stderr, "%d trying to read offset = %" PRId64 ", count = %" PRId64 "\n", rank, start_edge_index, edge_count_i); */ \
-        MPI_File_read_at_all_end((tg)->edgefile, edge_data_from_file, MPI_STATUS_IGNORE); \
-      } else { \
-        start_edge_index = int64_min(FILE_CHUNKSIZE * block_idx, (tg)->edgememory_size); \
-        end_edge_index = int64_min(start_edge_index + FILE_CHUNKSIZE, (tg)->edgememory_size); \
-      } \
+      start_edge_index = int64_min(FILE_CHUNKSIZE * block_idx, (tg)->edgememory_size); \
+      end_edge_index = int64_min(start_edge_index + FILE_CHUNKSIZE, (tg)->edgememory_size); \
       edge_count_i = end_edge_index - start_edge_index; \
       const packed_edge* restrict const user_buf = ((tg)->data_in_file ? edge_data_from_file : (tg)->edgememory + start_edge_index); \
       ptrdiff_t const user_buf_count = edge_count_i; \
@@ -112,14 +96,6 @@ typedef struct tuple_graph {
           break
 #define ITERATE_TUPLE_GRAPH_RELEASE_BUFFER \
           do { \
-            if ((tg)->data_in_file && block_idx + 1 < block_limit) { \
-              MPI_Offset start_edge_index = FILE_CHUNKSIZE * (MUL_SIZE((block_idx) + 1) + rank); \
-              if (start_edge_index > (tg)->nglobaledges) start_edge_index = (tg)->nglobaledges; \
-              edge_count_i = (tg)->nglobaledges - start_edge_index; \
-              if (edge_count_i > FILE_CHUNKSIZE) edge_count_i = FILE_CHUNKSIZE; \
-              MPI_File_read_at_all_begin((tg)->edgefile, start_edge_index, edge_data_from_file, edge_count_i, packed_edge_mpi_type); \
-              buffer_released_this_iter = 1; \
-            } \
           } while (0)
 #define ITERATE_TUPLE_GRAPH_END \
           if (!buffer_released_this_iter) ITERATE_TUPLE_GRAPH_RELEASE_BUFFER; \
diff --git a/mpi/main.c b/mpi/main.c
index 5c05ca7..8d1be29 100644
--- a/mpi/main.c
+++ b/mpi/main.c
@@ -90,41 +90,9 @@ int main(int argc, char** argv) {
   tg.nglobaledges = (int64_t)(edgefactor) << SCALE;
   int64_t nglobalverts = (int64_t)(1) << SCALE;
 
-  tg.data_in_file = (filename != NULL);
+  tg.data_in_file = 0; //(filename != NULL);
   tg.write_file = 1;
 
-  if (tg.data_in_file) {
-    int is_opened = 0;
-    int mode = MPI_MODE_RDWR | MPI_MODE_EXCL | MPI_MODE_UNIQUE_OPEN;
-    if (!reuse_file) {
-      mode |= MPI_MODE_CREATE | MPI_MODE_DELETE_ON_CLOSE;
-    } else {
-      MPI_File_set_errhandler(MPI_FILE_NULL, MPI_ERRORS_RETURN);
-      if (MPI_File_open(MPI_COMM_WORLD, (char*)filename, mode,
-			MPI_INFO_NULL, &tg.edgefile)) {
-	if (0 == rank && getenv("VERBOSE"))
-          fprintf (stderr, "%d: failed to open %s, creating\n",
-		   rank, filename);
-	mode |= MPI_MODE_RDWR | MPI_MODE_CREATE;
-      } else {
-	MPI_Offset size;
-	MPI_File_get_size(tg.edgefile, &size);
-	if (size == tg.nglobaledges * sizeof(packed_edge)) {
-	  is_opened = 1;
-	  tg.write_file = 0;
-	} else /* Size doesn't match, assume different parameters. */
-	  MPI_File_close (&tg.edgefile);
-      }
-    }
-    MPI_File_set_errhandler(MPI_FILE_NULL, MPI_ERRORS_ARE_FATAL);
-    if (!is_opened) {
-      MPI_File_open(MPI_COMM_WORLD, (char*)filename, mode, MPI_INFO_NULL, &tg.edgefile);
-      MPI_File_set_size(tg.edgefile, tg.nglobaledges * sizeof(packed_edge));
-    }
-    MPI_File_set_view(tg.edgefile, 0, packed_edge_mpi_type, packed_edge_mpi_type, "native", MPI_INFO_NULL);
-    MPI_File_set_atomicity(tg.edgefile, 0);
-  }
-
   /* Make the raw graph edges. */
   /* Get roots for BFS runs, plus maximum vertex with non-zero degree (used by
    * validator). */
@@ -209,13 +177,7 @@ int main(int argc, char** argv) {
         }
 	if (tg.write_file) {
 	  generate_kronecker_range(seed, SCALE, start_edge_index, start_edge_index + edge_count, actual_buf);
-	  if (tg.data_in_file && my_col == (block_idx % ranks_per_row)) { /* Try to spread writes among ranks */
-	    MPI_File_write_at(tg.edgefile, start_edge_index, actual_buf, edge_count, packed_edge_mpi_type, MPI_STATUS_IGNORE);
-	  }
-	} else {
-	  /* All read rather than syncing up for a row broadcast. */
-	  MPI_File_read_at(tg.edgefile, start_edge_index, actual_buf, edge_count, packed_edge_mpi_type, MPI_STATUS_IGNORE);
-	}
+	} 
         ptrdiff_t i;
 #ifdef _OPENMP
 #pragma omp parallel for
@@ -300,9 +262,7 @@ int main(int argc, char** argv) {
     if (in_generating_rectangle) {
       MPI_Free_mem(has_edge);
     }
-    if (tg.data_in_file && tg.write_file) {
-      MPI_File_sync(tg.edgefile);
-    }
+  
   }
   double make_graph_stop = MPI_Wtime();
   double make_graph_time = make_graph_stop - make_graph_start;
@@ -344,10 +304,13 @@ int main(int argc, char** argv) {
     run_bfs(root, &pred[0]);
     double bfs_stop = MPI_Wtime();
     bfs_times[bfs_root_idx] = bfs_stop - bfs_start;
+
     if (rank == 0) fprintf(stderr, "Time for BFS %d is %f\n", bfs_root_idx, bfs_times[bfs_root_idx]);
 
+    edge_counts[bfs_root_idx] = 1.0;
+
     /* Validate result. */
-    if (!getenv("SKIP_VALIDATION")) {
+    /*    if (!getenv("SKIP_VALIDATION"))  {
       if (rank == 0) fprintf(stderr, "Validating BFS %d\n", bfs_root_idx);
 
       double validate_start = MPI_Wtime();
@@ -364,20 +327,16 @@ int main(int argc, char** argv) {
 	if (rank == 0) fprintf(stderr, "Validation failed for this BFS root; skipping rest.\n");
 	break;
       }
-    } else {
+      } else*/ {
       validate_times[bfs_root_idx] = -1;
     }
-  }
+    }
 
   MPI_Free_mem(pred);
   free(bfs_roots);
   free_graph_data_structure();
 
-  if (tg.data_in_file) {
-    MPI_File_close(&tg.edgefile);
-  } else {
     free(tg.edgememory); tg.edgememory = NULL;
-  }
 
   /* Print results. */
   if (rank == 0) {
diff --git a/mpi/mpi_workarounds.h b/mpi/mpi_workarounds.h
index 5ba26d1..c186b85 100644
--- a/mpi/mpi_workarounds.h
+++ b/mpi/mpi_workarounds.h
@@ -18,7 +18,7 @@
 /* Use standard definitions in MPI 2.2. */
 #else
 /* Backup version for non-2.2-compliant MPI implementations. */
-#error "Your MPI implementation is not compliant with the MPI 2.2 standard; please comment out this line in mpi_workarounds.h and ensure that the type definitions after it are correct."
+//#error "Your MPI implementation is not compliant with the MPI 2.2 standard; please comment out this line in mpi_workarounds.h and ensure that the type definitions after it are correct."
 
 #define FIND_MPI_INT_TYPE(t) (sizeof(t) == sizeof(signed char) ? MPI_SIGNED_CHAR : sizeof(t) == sizeof(short) ? MPI_SHORT : sizeof(t) == sizeof(int) ? MPI_INT : sizeof(t) == sizeof(long) ? MPI_LONG : sizeof(t) == sizeof(long long) ? MPI_LONG_LONG : MPI_DATATYPE_NULL)
 #define FIND_MPI_UINT_TYPE(t) (sizeof(t) == sizeof(unsigned char) ? MPI_UNSIGNED_CHAR : sizeof(t) == sizeof(unsigned short) ? MPI_UNSIGNED_SHORT : sizeof(t) == sizeof(unsigned int) ? MPI_UNSIGNED : sizeof(t) == sizeof(unsigned long) ? MPI_UNSIGNED_LONG : sizeof(t) == sizeof(unsigned long long) ? MPI_UNSIGNED_LONG_LONG : MPI_DATATYPE_NULL)
